认识与学习BASH

终端机的环境设置：stty,set
stty [-a]
参数：
-a: 将目前所有的 stty 参数列出来
例：
stty erase ^h   //用[Ctrl]+h 来进行字符的删除

set [-uvCHhmBx]
参数：
-u: 默认不启用，若启用后，当使用未设置变量时，会显示错误信息；
-v: 默认不启用，若启用后，在讯息被输出前，会显示信息的原始内容；
-x: 默认不启用，若启用后，在命令被执行前，会显示命令内容（前面有 ++ 符号）；
-h: 默认启用，与历史命令有关；
-m: 默认启用，与工作管理有关；
-B: 默认启用，与括号 [] 的作用有关；
-C: 默认不启用，使用 > 等时，则若文件存在时，该文件不会被覆盖。

范例：
echo $-  //显示目前所有的 set 设置的值
set -u
set -x 


bash默认的组合按键
[Ctrl]+c: 终止目前的命令
[Ctrl]+d: 输入结束(EOF),例如邮件结束的时候
[Ctrl]+m: Enter
[Ctrl]+s: 暂停屏幕输出
[Ctrl]+q: 恢复屏幕输出
[Ctrl]+u: 在提示符下，将整行命令删除
[Ctrl]+z: 暂停目前的命令


通配符
*: 代表0个到无穷多个任意字符
?: 代表一定有一个任意字符
[]:同样代表一定有一个在中括号内的字符（非任意字符）。例如[abcd]代表一定有一个字符，可能是a,b,c,d这四个任何一个
[-]: 若有减号在中括号内，代表在编码顺序内的所有字符。例如[0-9]代表0到9之间的所有数字。因为数字的预习编码是连续的
[^]: 若中括号内的第一个字符为指数符号(^),那表示反向选择，例如[^abc]代表一定有一个字符，只要是非a,b,c的其他字符就接受的意思


特殊符号
#: 批注符号
\: 转义符号
|：管道（pipe）,分隔两个管道命令的界定
;：连续命令执行分隔符，连续性命令的界定（注意，与管道命令并不相同）
~: 用户的主文件夹
$: 使用变量前导符，即变量之前需要加的变量替代值
&：作业控制（job control),将命令变成背景下工作
!: 逻辑运算意义上的“非”(not)的意思
/: 目录符号，路径分隔符
>,>>: 数据流重定向，输出导向，分别是“替换”与“累加”
<,<<: 数据流重定向，输入导向
'': 单引号，不具有变量置换的功能
"": 双引号，具有变量置换的功能
``: 两个 ' 中间为可以先执行的命令，也可以使用 $()
( ): 在中间为子 shell 的起始与结束
{ }：中间为命令块的组合


数据流重定向
1. 标准输入(stdin): 代码为0，使用< 或 <<;(<:替换；<<:累加)
2. 标准输出(stdout): 代码为1，使用 > 或 >>;
3. 标准错误输出(stderr): 代码为2，使用 2> 或 2>>

范例：
find /home -name .bashrc > list_right 2> list_error  //将stdout 与 stderr 分别存到不同的文件去

/dev/null 垃圾桶黑洞设备与特殊写法
范例：
find /home -name .bashrc 2> /dev/null  //将错误的数据丢弃，屏幕上显示正确的数据

//将命令的数据（正确+错误）全部写入同一文件
find /home -name .bashrc > list 2> list  //错误
find /home -name .bashrc > list 2> &1  //正确
find /home -name .bashrc &> list   //正确

范例：
cat > catfile < ~/.bashrc
cat > catfile << "eof"


命令执行的判断依据： ;, &&, ||
(1) cmd;cmd
(2)$?(命令回传值) 与&& 或 ||
若前一个命令执行的结果为正确，会回传一个$=0的值。


管线命令(pipe)
例：ls -al /etc | less
管线命令需要注意的地方：
(1)管线命令仅会处理standard output,对于standard error output会予以忽略；
(2)管线命令必须能够接受来自前一个指令的数据成为standard input继续处理才行。

撷取命令：cut,grep
cut:
cut -d '分隔符' -f fields  //用于有特定分隔字符
cut -c 字符区间   //用于排列整齐的讯息
选项参数：
-d: 后面接分隔字符。与 -f 一起使用;
-f: 依据 -d 的分隔字符将一段讯息分割成数段，用 -f 取出第几段的意思；
-c: 以字符(characters)的单位取出固定字符区间
范例：
echo $PATH | cut -d ';' -f 5   //第5段
echo $PATH | cut -d ';' -f 3,5 //第3和5段
export | cut -c 12-  //取得第12字符以后的所有字符
export | cut -c 12-20  //取得第12-20的字符
（cut 主要的用途在于将同一行里面的数据进行分解）

grep:
grep [-acinv] [--color=auto] '搜寻字符串' filename
选项与参数：
-a: 将binary文档以text文档的方式搜寻数据
-c: 计算找到'搜寻字符串'的次数
-i: 忽略大小写的不同，所以大小写视为相同
-n: 顺便输出行号
-v: 反向选择，亦即显示出没有'搜寻字符串'内容的那一行
--color=auto: 可以将找到的关键词部分加上颜色的显示
范例：
last | grep 'root'
last | grep -v 'root'
last | grep 'root' | cut -d ' ' -f 1
grep --color=auto 'MANPATH' /etc/man.config

排序命令：sort, wc, uniq
sort:
sort [-fbMnrtuk] [file or stdin]
选项与参数：
-f: 忽略大小写的不同，所以大小写视为相同
-b: 忽略最前面的空格符部分
-M: 以月份的名字来排序，例如JAN,DEC等等的排序方法
-n: 使用"纯数字"进行排序（默认是以文字形态排序）
-r: 反向排序
-u: 即uniq,相同的数据中，仅出现一行代表
-t: 分隔符，预设是用"tab"键来分隔
-k: 以那个区间(field)来进行排序  (配合-t使用)
范例：
cat /etc/passwd | sort
cat /etc/passwd |sort -t ':' -k 3  // /etc/passwd内容以':'分隔，以第三栏来排序
cat /etc/passwd |sort -t ':' -k 3 -n  //以数字来排序

uniq [-ic]
选项与参数：
-i: 忽略大小写字符的不同
-c: 进行计数
范例：
last | cut -d ' ' -f 1 | sort | uniq
last | cut -d ' ' -f 1 | sort | uniq -c 

wc：统计文档行、字数、字符
wc [-lwm]
选项与参数：
-l: 仅列出行
-w: 仅列出多少字(英文单字)
-m: 多少字符
(默认三个依次列出)
范例：
cat /etc/man.config | wc 
last | grep [a-zA-Z] | grep -v 'wtmp' | wc -l

tee: 双向重导向
tee [-a] file
选项与参数：
-a: 以累加(append)的方式，将数据加入file当中 (默认是覆盖)
范例：
last | tee last.list | cut -d ' ' -f 1
ls -l /home | tee -a ~/homefile | more


字符转换命令: tr,col,join,paste,expand
tr [-ds] SET1 ...
选项与参数：
-d: 删除讯息当中的SET1这个字符串
-s: 取代掉重复的字符
范例：
last | tr '[a-z]' '[A-Z]'  //将last输出的讯息中，所有的小写变成大写字符
cat /etc/passwd | tr -d ':' //将输出讯息中的冒号(:)删除
将/etc/passwd转存成dos断行到 /root/passwd中，再将 ^M符合删除
cp /etc/passwd /root/passwd && unix2dos /root/passwd
cat /root/passwd | tr -d '\r' > /root/passwd.linux   //^M可以使用\r来代替

col [-xb]
选项与参数：
-x: 将 tab 键转换成对等的空格键
-b: 在文字内有反斜杠(\)时，仅保留反斜杠最后接的那个字符
范例：利用cat -A 显示出所有特殊按键，最后以col 将 [tab] 转成空白
cat -A /etc/man.config
cat /etc/man.config | col -x | cat -A | more
范例：将col的man page 转存成为 /root/col.man 的纯文本文档
man col | col -b > /root/col.man


join:
join [-ti12] file1 file2
选项与参数：
-t: join 默认以空格符分隔数据，并且比对"第一字段"的数据，如果两个档案相同，则将两笔数据联成一行，且第一个字段放在第一个
-i: 忽略大小写的差异
-1：数字1，代表"第一个档案要用哪个字段来分析"
-2：数字2，代表"第二个档案要用哪个字段来分析"
范例：
join -t ':' /etc/passwd /etc/shadow
join -t ':' -1 4 /etc/passwd -2 3 /etc/group
(在使用join之前，应事先将文档进行排序(sort)处理，否则有些比对项目会被略过)

paste: 直接将两行贴在一起，中间以[tab]键隔开
paste [-d] file1 file2
选项与参数：
-d: 后面接分隔符。预设以[tab]来分隔
- ：如果file部分写成 - ,表示来自standard input
范例：
paste /etc/passwd /etc/shadow
cat /etc/group | paste /etc/shadow /etc/shadow - | head -n 3

expand [-t] file
选项与参数：
-t: 后面可以接数字。一般来说，一个tab键可以用8个空格键取代。也可以自己定义
范例：
grep '^MANPATH' /etc.man.config | head -n 3 | expand -t 6 - | cat -A
(^行首的代表标志为 ^)
(unexpand: 将空白转成[tab])

split: 分割命令
split [-bl] file PREFIX
选项与参数：
-b: 后面可接欲分割成的文档大小，可加单位，例如b,k,m 等
-l: 以行数来进行分割
PREFIX: 代表前导符的意思，可作为分割文档的前导文字
范例：
将/etc/termcap分成300k一个文档
split -b 300k /etc/termcap termcap
(写上前导文件，小文档会以xxxaa,xxxab,xxxac等方式命名)
将上面分割的文档合并为termcapback
cat termcap* >> termcapback
范例：
ls -al / | split -l 10 - lsroot

xargs: 参数代换
xargs [-0epn] command
-0: 如果输入的stdin 含有特殊字符，例如`,\,空格键等字符时，将它还原成一般字符
-e: (EOF),后面接一个字符串，当xargs分析到这个字符串时，就会停止工作
-p: 在执行每个指令的argument 时，都会询问使用者
-n: 后面接次数，每次 command 指令执行时，要使用几个参数。
(当xargs后面没有接任何的指令时，默认以echo来进行输出)

范例：将/etc/passwd 内的第一栏取出，仅取出三行，使用finger这个指令将每个账号内容秀出来
cut -d ':' -f 1 /etc/passwd | head -n 3 | xargs finger
(由xargs将三个账号名称变成finger后面需要的参数)

范例：将所有的/etc/passwd 内的账号都以finger查阅，但一次仅查阅五个账号
cut -d 'd' -f 1 /etc/passwd | xargs -p -e'lp' finger //-e'lp'中间没有空格

关于减号 - 的用途
在管线命令当中，常常会使用到前一个指令的stdout作为这次的stdin,某些指令需要用到文件名(例如tar)来进行处理时，该stdin 与 stdout 可以利用减号'-'来替代，例如：
tar -cvf - /home | tar -xvf -

















