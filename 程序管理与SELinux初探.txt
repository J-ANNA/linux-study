程序管理与SELinux初探

程序(program)：通常为 binary program ，放置在储存媒体中 (如硬盘、光盘、软盘、磁带等)，为实体档案的型态存在；
程序(process)：程序被触发后，执行者的权限与属性、程序的程序代码与所需数据等都会被加载内存中，操作系统并给予这个内存内的单元一个标识符(PID)，可以说，程序就是一个正在运作中的程序。


job control 的管理

要进行 bash 的 job control 必须要注意到的限制是：
1. 这些工作所触发的程序必须来自于你 shell 的子程序(只管理自己的 bash)；
2. 前景：你可以控制与下达指令的这个环境称为前景的工作 (foreground)；
3. 背景：可以自行运作的工作，你无法使用 [ctrl]+c 终止他，可使用 bg/fg 呼叫该工作;
4. 背景中"执行"的程序不能等待terminal/shell的输入(input)


直接将指令丢到背景中"执行"的 &

范例：
[root@www ~]# tar -zpcf /tmp/etc.tar.gz /etc &
[1] 8400     <===== [job number] PID   打印信息
...
[1]+ Done     tar -zpcf /tmp/etc.tar.gz /etc  <===背景工作完成时的打印信息

将"目前"的工作丢到背景中"暂停": [ctrl]-z
范例：
[root@www ~]# vi ~/.bashrc
#在 vi 的一般模式下，按下 [ctrl]-z 这两个按键
[1]+ Stopped vim ~/.bashrc
[root@www ~]# <==顺利取得了前景的操控权
[root@www ~]# find / -print
....(输出省略)....
# 此时屏幕会非常的忙碌。因为屏幕上会显示所有的文件名。请按下 [ctrl]-z 暂停
[2]+ Stopped      find / -print
(在预设的情况下，使用[ctrl]-z丢到背景当中的工作都是"暂停"的状态)


观察目前的背景工作状态: jobs
[root@www ~]# jobs [-lrs]
选项与参数：
-l: 除了列出job number 与指令串之外，同时列出PID的号码;
-r：仅列出正在背景 run 的工作;
-s: 仅列出正在背景当中暂停(stop)的工作。

范例1：观察目前的bash当中，所有的工作，与对应的PID
[root@www ~]#jobs -lrs
[1]- 10314 Stopped vim ~/.bashrc
[2]+ 10833 Stopped find / -print

"+"代表最后放到背景的工作号码，也代表预设的取用工作(执行 fg 时处理的工作)；"-"代表倒数第二个放到背景中的工作号码；超过倒数第三个以后的工作，就不会有 +/- 符号存在了。

将背景工作拿到前景来处理：fg (foreground)
[root@www ~]#fg %jobnumber
选项与参数：
%jobnumber: jobnumber为工作号码(数字)。注意，那个 % 是可有可无的

范例一：先以 jobs 观察工作，再将工作取出：
[root@www ~]# jobs
[1]- 10314 Stopped vim ~/.bashrc
[2]+ 10833 Stopped find / -print
[root@www ~]# fg <==预设取出那个 + 的工作，亦即 [2]。立即按下 [ctrl]-z
[root@www ~]# fg %1 <==直接规定取出的那个工作号码，再按下[ctrl]-z
[root@www ~]# jobs
[1]+ Stopped vim ~/.bashrc
[2]- Stopped find / -print
(如果输入 "fg -" 则代表将 "-" 的那个工作号码拿出来)


让工作在背景下的状态变成运作中: bg
范例1：执行 find / -perm +7000 > /tmp/text.txt 后，立刻丢到背景去暂停
[root@www ~]# find / -perm +7000 > /tmp/text.txt
# 此时，立刻按下 [ctrl]-z 暂停
[3]+ Stopped find / -perm +7000 > /tmp/text.txt
范例2：让该工作在背景下进行，并且观察他
[root@www ~]# jobs; bg %3; jobs
[1]- Stopped      vim ~/.bashrc
[2] Stopped       find / -print
[3]+ Stopped      find / -perm +7000 > /tmp/text.txt
[3]+ find / -perm +7000 > /tmp/text.txt & <==用 bg%3 的情况
[1]+ Stopped      vim ~/.bashrc
[2] Stopped       find / -print
[3]- Running      find / -perm +7000 > /tmp/text.txt &


管理背景当中的工作：kill
[root@www ~]# kill -signal %jobnumber
[root@www ~]# kill -l
选项与参数：
-l: 列出目前 kill 能够使用的讯号(signal)有哪些
signal: 代表给予后面接的那个工作什么样的指示。用 man 7 signal 可知：
-1：重新读取一次参数的配置文件(类似 reload);
-2: 代表与由键盘输入 [ctrl]-c 同样的动作;
-9: 立刻强制删除一个工作;
-15: 以正常的程序方式终止一项工作。与 -9 不一样。 

范例1：找出目前的 bash 环境下的背景工作，并将该工作 "强制删除"。
[root@www ~]# jobs
[1]+ Stopped vim ~/.bashrc
[2] Stopped find / -print
[root@www ~]# kill -9 %2; jobs
[1]+ Stopped vim ~/.bashrc
[2] Killed find / -print
# 再过几秒你再下达 jobs 一次，就会发现 2 号工作不见了，因为被移除了。
范例2：找出目前的 bash 环境下的背景工作，并将该工作 "正常终止"掉。
[root@www ~]# jobs
[1]+ Stopped vim ~/.bashrc
[root@www ~]# kill -SIGTERM %1
# -SIGTERM 与 -15 是一样的。可以使用 kill -l 来查阅

另外， kill 后面接的数字默认会是 PID ，如果想要管理 bash 的工作控制，就得要加上 % 数字了，这点需要特别留意一下。


脱机管理问题
nohup: 在脱机或注销系统后，还能够让工作继续进行。
[root@www ~]# nohup [指令与参数]   <==== 在终端机前景中工作
[root@www ~]# nohup [指令与参数] &  <==== 在终端机背景中工作

(注意：nohup并不支持bash内建的指令，因此你的指令必须要是外部指令才行。)

范例：
# 1. 先编辑一支会 "睡眠500秒"的程序：
[root@www ~]# vim sleep500.sh
#!/bin/bash
/bin/sleep 500s
/bin/echo "I have slept 500 seconds."

# 2. 丢到背景中去执行，并且立刻注销系统：
[root@www ~]# chmod a+x sleep500.sh
[root@www ~]# nohup ./sleep500.sh &
[1] 5074
[root@www ~]# nohup: appending output to ‘nohup.out’ <==会告知
这个讯息
[root@www ~]# exit
#如果再次登入的话，使用 ps -l 去查阅程序，会发现 sleep500.sh 还在执行中，并不会被中断掉


程序管理
1. 程序的观察
ps: 将某个时间点的程序运作情况撷取下来
[root@www ~]# ps aux  <===观察系统所有的程序数据
[root@www ~]# ps -lA  <===也是能够观察所有系统的数据
[root@www ~]# ps axjf <===连同部分程序树状态
选项与参数：
-A: 所有process均显示出来，与 -e 具有同样的效用;
-a: 不与terminal有关的所有process;
-u: 有效使用者(effective user)相关的process;
x:  通常与 a 这个参数一起使用，可列出较完整信息;
输出格式规划：
l:  较长、较详细的将该PID的信息列出;
j:  工作的格式(jobs format);
-f: 做一个更为完整的输出。

仅观察自己的bash相关程序:  ps -l
范例一：将目前属自己这次登入的PID与相关信息列示出来(只与自己的 bash 有关)
[root@www ~]# ps -l
F S UID PID PPID C PRI NI ADDR SZ WCHAN TTY TIME CMD
4 S 0 13639 13637 0 75 0 - 1287 wait pts/1 00:00:00 bash
4 R 0 13700 13639 0 77 0 - 1101 - pts/1 00:00:00 ps


观察系统所有程序: ps aux   (注意：没有 "-")
范例2：列出目前所有的正在内存当中的程序：
[root@www ~]# ps aux
USER PID %CPU %MEM VSZ  RSS TTY STAT START TIME COMMAND
root  1   0.0  0.0 2064 616  ?   Ss  Mar11 0:01 init [5]
root  2   0.0  0.0 0    0    ?   S<  Mar11 0:00 [migration/0]
root  3   0.0  0.0 0    0    ?   SN  Mar11 0:00 [ksoftirqd/0]
.....(中间省略).....
root 13639 0.0 0.2 5148 1508 pts/1 Ss 11:44 0:00 -bash
root 14232 0.0 0.1 4452 876 pts/1 R+ 15:52 0:00 ps aux
root 18593 0.0 0.0 2240 476 ? Ss Mar14 0:00 /usr/sbin/atd

范例3：以范例1的显示内容，显示出所有的程序：
[root@www ~]# ps -lA
F S UID PID PPID C PRI NI ADDR SZ WCHAN TTY TIME CMD
4 S 0    1   0   0 76  0  -    435 -    ? 00:00:01 init
1 S 0    2   1   0 94  19 -    0 ksofti ? 00:00:00 ksoftirqd/0
1 S 0    3   1   0 70  -5 -    0 worker ? 00:00:00 events/0
....(以下省略)....
# 你会发现每个字段与 ps -l 的输出情况相同，但显示的程序则包括系统所有的程序。

范例4：列出类似程序树的程序显示：
[root@www ~]# ps axjf    #也可以使用 pstree 来达成这个程序树
PPID PID PGID SID TTY TPGID STAT UID TIME COMMAND
0    1    1    1   ?    -1   Ss   0  0:01 init [5]
.....(中间省略).....
1 4586 4586 4586 ? -1 Ss 0 0:00 /usr/sbin/sshd
4586 13637 13637 13637 ? -1 Ss 0 0:00 \_ sshd: root@pts/1
13637 13639 13639 13639 pts/1 14266 Ss 0 0:00 \_ -bash
13639 14266 14266 13639 pts/1 14266 R+ 0 0:00 \_ ps axjf
.....(后面省略).....

范例5：找出与 cron 和 syslog 这两个服务有关的 PID 号码
[root@www ~]# ps aux | egrep '(cron|syslog)'
root 4286 0.0 0.0 1720 572 ? Ss Mar11 0:00 syslogd -m 0
root 4661 0.0 0.1 5500 1192 ? Ss Mar11 0:00 crond
root 14286 0.0 0.0 4116 592 pts/1 R+ 16:15 0:00 egrep (cron|syslog)
# 所以号码是 4286 及 4661 这两个


僵尸程序(zombie)：如果发现在某个程序的CMD后面还接上 <defunct>时，就代表该程序是僵尸程序。例如：
apache 8683 0.0 0.9 83384 9992 ? Z 14:33 0:00 /usr/sbin/httpd
<defunct>


top: 动态观察程序的变化
相对于 ps 是撷取一个时间点的程序状态，top则可以持续侦测程序运作的状态。
[root@www ~]# top [-d 数字] | top [-bnp]
选项与参数：
-d: 后面可以接秒数，就是整个程序画面更新的秒数。预设是 5 秒;
-b: 以批次的方式执行 top, 通常会搭配数据流重导向来将批次的结果输出成为文档。
-n: 与 -b 搭配，意义是需要进行几次top的输出结果。
-p: 指定某些个PID来进行观察检测。

在top执行过程当中可以使用的按键指令:
?: 显示在top当中可以输入的按键指令;
P: 以CPU的使用资源排序显示;
M: 以Memory的使用资源排序显示;
N: 以PID来排序;
T: 由该Process使用的CPU时间累积(TIME+)排序;
k: 给予某个PID一个讯号(signal);
r: 给予某个PID重新制订一个 nice 值;
q: 离开top软件的按键。

范例1：每两秒钟更新一次 top ，观察整体信息：
[root@www ~]# top -d 2
top - 17:03:09 up 7 days, 16:16, 1 user, load average: 0.00, 0.00, 0.00
Tasks: 80 total, 1 running, 79 sleeping, 0 stopped, 0 zombie
Cpu(s): 0.5%us, 0.5%sy, 0.0%ni, 99.0%id, 0.0%wa, 0.0%hi, 0.0%si,0.0%st
Mem: 742664k total, 681672k used, 60992k free, 125336k buffers
Swap: 1020088k total, 28k used, 1020060k free, 311156k cached
<==如果加入 k 或 r 时，就会有相关的字样出现在这里
PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+
COMMAND
14398 root 15 0 2188 1012 816 R 0.5 0.1 0:00.05 top
1 root 15 0 2064 616 528 S 0.0 0.1 0:01.38 init
2 root RT -5 0 0 0 S 0.0 0.0 0:00.00 migration/0

范例2：将top的信息进行2次，然后将结果输出到 /tmp/top.txt
[root@www ~]# top -b -n 2 > /tmp/top.txt
# 这样一来，就可以将 top 的信息存到 /tmp/top.txt 档案中了

范例：观察单一程序
我们自己的bash PID 可由 $$ 变量取得，使用 top 持续观察该 PID
[root@www ~]# echo $$
13639 <==这个数字就是 bash 的 PID
[root@www ~]# top -d 2 -p 13639
top - 17:31:56 up 7 days, 16:45, 1 user, load average: 0.00, 0.00, 0.00
Tasks: 1 total, 0 running, 1 sleeping, 0 stopped, 0 zombie
Cpu(s): 0.0%us, 0.0%sy, 0.0%ni,100.0%id, 0.0%wa, 0.0%hi, 0.0%si,0.0%st
Mem: 742664k total, 682540k used, 60124k free, 126548k buffers
Swap: 1020088k total, 28k used, 1020060k free, 311276k cached
PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+
COMMAND
13639 root 15 0 5148 1508 1220 S 0.0 0.2 0:00.18 bash

如果想在top底下进行一些动作，可直接配合使用按键指令。



pstree:   (常用于查看程序之间的相关性)
[root@www ~]# pstree [-A|U] [-up]
选项与参数：
-A: 各程序树之间的连接以 ASCII字符来连接;
-U: 各程序树之间的连接以万国码的字符来连接。在某些终端接口下可能会有错误;
-p: 并同时列出每个 process 的 PID;
-u: 并同时列出每个 process 的所属账号名称。

范例1：列出目前系统上面所有的程序树的相关性：
[root@www ~]# pstree -A
init-+-acpid
	|-atd
	|-auditd-+-audispd---{audispd} <==这行与底下一行为 auditd 分出来的子程序
	|`-{auditd}
	|-automount---4*[{automount}] <==预设情况下，相似的程序会以数字显示
....(中间省略)....
	|-sshd---sshd---bash---pstree <==就是我们指令执行的那个相依性
....(底下省略)....

范例2：承上题，同时秀出 PID 与 users
[root@www ~]# pstree -Aup
init(1)-+-acpid(4555)
	|-atd(18593)
	|-auditd(4256)-+-audispd(4258)---{audispd}(4261)
	| `-{auditd}(4257)
	|-automount(4536)-+-{automount}(4537) <==程序相似但 PID 不同
	|   |-{automount}(4538)
    | 	|-{automount}(4541)
	| 	`-{automount}(4544)
....(中间省略)....
	|-sshd(4586)---sshd(16903)---bash(16905)---pstree(16967)
....(中间省略)....
	|-xfs(4692,xfs) <==因为此程序拥有者并非执行 pstree 者！所以列出账号
....(底下省略)....
# 在括号()内的即是 PID 以及该程序的 owner。不过，由于是使用
# root的身份执行此一指令，所以属于 root 的程序就不会显示出来啦


程序的管理
主要的讯号代号与名称对应及内容
代号   名称              内容
1      SIGHUP  启动被终止的程序，可让该 PID 重新读取自己的配置文件，类似重新启动。
2      SIGINT  相当于用键盘输入 [ctrl]-c 来中断一个程序的进行。
9      SIGKILL 代表强制中断一个程序的进行。
15     SIGTERM 以正常的结束程序来终止该程序。
17     SIGSTOP 相当于用键盘输入 [ctrl]-z 来暂停一个程序的进行。

kill -signal PID 
范例：以ps找出syslog这个程序的PID后，再使用kill传送讯息，使得syslog可以重新读取配置文件。
kill -SIGHUP $(ps aux | grep 'syslog' | grep -v 'syslog' | awk '{print $2}')


killall -signal 指令名称
[root@www ~]# killall [-iIe] [command name]
选项与参数：
-i: interactive,交互式的，若需要删除时，会出现提示符给用户;
-e: exact，表示 "后面接的 command name 要一致"，但整个完整的指令不能超过15个字符;
-I: 指令名称(可能含参数)忽略大小写。

范例1：给予 syslogd 这个指令启动的 PID 一个 SIGHUP 的讯号
[root@www ~]# killall -1 syslogd
# 如果用 ps aux 仔细看一下，syslogd 才是完整的指令名称。但若包含整个参数，则 syslogd -m 0 才是完整的

范例2: 强制终止所有httpd启动的程序
[root@www ~]#kill -9 httpd

范例3：依次询问每个 bash 程序是否需要被终止运作
[root@www ~]# killall -i -9 bash
Kill bash(16905) ? (y/N) n <==这个不杀
Kill bash(17351) ? (y/N) y <==这个杀掉
# 具有互动的功能。可以询问你是否要删除 bash 这个程序。要注意，若没有 -i 的参数，所有的 bash 都会被这个 root 给杀掉！包括 root 自己的 bash 。


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


