学习shell scripts
shell script(程序化脚本): 是利用shell的功能所写的一个program,这个程序使用纯文本文件，将一些shell的语法与指令(含外部指令)写在里面，搭配正则表达式、管线命令与数据流量导向等功能，以达到我们所想要的处理目的。

在 shell script 的编写中需要注意的事项：
1. 指令的执行是从上而下、从左而右的分析与执行；
2. 指令、选项与参数间的多个空白都会被忽略掉；
3. 空白行也将被忽略掉，并且[tab]按键所推开的空白同样视为空格键；
4. 如果读取到一个Enter符号(CR)，就尝试开始执行该行(或该串)命令；
5. 如果一行的内容太多则可以使用 \[Enter] 来延伸至下一行；
6. # 可做为批注！任何加在 # 后面的资料将全部被视为批注文字而被忽略！

如此一来，我们在script内所编写的程序，就会被一行一行的执行。现在我们假设你写的这个程序文件名是/home/dmtsai/shell.sh。好了，那如何执行这个档案？很简单，可以有底下几个方法：
1. 直接指令下达：shell.sh档案必须要具备可读于可执行(rx)权限，然后：
	o 绝对路径：使用 /home/dmtsai/shell.sh 来下达指令；
	o 相对路径：假讴工作目录在 /home/dmtsai/，则使用./shell.sh来执行
	o 变量 PATH 功能：将 shell.sh 放在PATH指定的目录内，例如：~/bin/
2. 以 bash 程序来执行：透过 bash shell.sh 或 sh shell.sh 来执行

script编写过程
1. 第一行 #!/bin/bash 宣告这个script使用的shell名称；(必须添加)
2. 程序内容说明：内容与功能；版本信息；作者与联络方式；建档日期；历史记录
3. 主要环境变量的宣告：如PATH与LANG
4. 主要程序部分
5. 执行结果告知(定义回传值)


script 的执行方式差异 (source, sh script, ./script)
利用直接执行的方式执行(sh script, ./script) script,(子)程序执行完之后，各项变量或动作不会回传到父程序中
利用source来执行script: 直接在父程序中执行，会保存变量或动作


利用test指令的测试功能
执行结果并不会显示任何讯息，但最后我们可以透过 $? 或 && 及 ||来展现整个结果
例如：
test -e /dmtsai && echo "exist" || echo "not exist"
测试的标志     意义
1. 关于某个档名的"文件类型"判断，如 test -e filename
-e             该"文件名"是否存在(常用)
-f             该"文件名"是否存在且为文档(file)
-d             该"文件名"是否存在且为目录(directory)
-b             该"文件名"是否存在且为一个 block device 装置
-c             该"文件名"是否存在且为一个 character device 装置
-S             该"文件名"是否存在且为一个Socket 文档
-p             该"文件名"是否存在且为一个FIFO(pipe)文档
-L             该"文件名"是否存在且为一个连结文档
2. 关于文档的权限侦测，如 test -r filename
-r             侦测该"文件名"是否存在且具有"可读"的权限
-w             侦测该"文件名"是否存在且具有"可写"的权限
-x             侦测该"文件名"是否存在且具有"可执行"的权限
-u             侦测该"文件名"是否存在且具有"SUID"的权限
-g             侦测该"文件名"是否存在且具有"SGID"的权限
-k             侦测该"文件名"是否存在且具有"Sticky bit"的权限
-s             侦测该"文件名"是否存在且为"非空白文档"
3. 两个文档之间的比较，如：test file1 -nt file2
-nt            (newer than)判断file1是否比file2新
-ot            (older than)判断file1是否比file2旧
-ef            判断file1与file2是否为同一文档，可用在判断hard link
               的判定上。主要意义在判定两个文档是否均指向同一个inode
4.关于两个整数之间的判定，如test n1 -eq n2
-eq            两数值相等(equal)
-ne            量数值不等(not equal)
-gt            n1 大于 n2(greater than)
-lt            n1 小于 n2(less than)
-ge            n1 大于等于 n2(greater than or equal)
-le            n1 小于等于 n2(less than or equal)
5. 判定字符串的数据
test -z string  判定字符串是否为0? 若string为空字符串，则为 true
test -n string  判定字符串是否为非0? 若string为空字符串，则为false(-n可忽略)
test str1 = str2  判定str1是否等于str2，若相等，则回传true
test str1 != str2  判定str1是否不等于str2，若相等，则回传 false
6. 多重条件判定，如 test -r filename -a -x filename 
-a        (and)两状况同时成立
-o        (or)两状况任何一个成立
!         反向状态，如 test ! -x file, 当file 不具有 x 时，回传 true

范例：
#!/bin/bash
#program:
#user input a filename,program will check the flowing:
#  1)exist?  2)file/firectory? 3)file permissions
#history:
2018/05/21  qinshijie  first release

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

echo -e "Please input a filename,I will check the filename's type and permission.\n\n"
read -p "Input a filename:" filename
test -z $filename && echo "you must input a filename." && exit 0
test ! -e $filename && echo "the filename $filename do not exist" && exit 0
test -f $filename && filetype= "regulare file"
test -d $filename && filetype= "directory"
test -r $filename && perm="readable"
test -w $filename && perm="$perm writable"
test -x $filename && perm="$perm executable"

echo "the filename: $filename is a $filetype"
echo "And the permission are: $perm" 

利用判断符号[]
范例：
[ -z "$HOME" ];ehco $?  //$?: 若上一命令执行成功则$?为0，否则不为0
注意：
 在中括号 [] 内的每个组件都需要有空格键来分隔；
 在中括号内的发数，最好都以双引号括号起来；
 在中括号内的常数，最好都以单或双引号括号起来。
范例：
[ "$yn" == "Y" -o "$yn" == "y" ] && echo "ok,continue" && exit 0

/path/to/scriptname opt1 opt2 opt3 opt4
           $0         $1  $2   $3   $4
shell script的默认变数($0,$1...)
$#：代表后接的参数个数；以上表为例这里显示为 4
$@：代表 "$1" "$2" "$3" "$4" 之意，每个变量是独立的(用双引号括起来)
$*：代表 "$1c$2c$3c$4，其中 c 为分隔字符，默认为空格键

范例：
[root@www scripts]# vi sh07.sh
#!/bin/bash
# Program:
# Program shows the script name, parameters...
# History:
# 2009/02/17 VBird First release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
echo "The script name is ==> $0"
echo "Total parameter number is ==> $#"
[ "$#" -lt 2 ] && echo "The number of parameter is less than 2. Stop
here." \
&& exit 0
echo "Your whole parameter is ==> '$@'"
echo "The 1st parameter ==> $1"
echo "The 2nd parameter ==> $2"
执行结果：
[root@www scripts]# sh sh07.sh theone haha quot
The script name is ==> sh07.sh <==檔名
Total parameter number is ==> 3 <==果然有三个参数
Your whole parameter is ==> 'theone haha quot' <==参数的内容全部
The 1st parameter ==> theone <==第一个参数
The 2nd parameter ==> haha <==第二个参数


shift: 造成参数变量号码偏移
shift n  :代表拿掉最前面几个参数。(不加n,则默认拿掉一个)
范例：
[root@www scripts]# vi sh08.sh
#!/bin/bash
# Program:
# Program shows the effect of shift function.
# History:
# 2009/02/17 VBird First release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
echo "Total parameter number is ==> $#"
echo "Your whole parameter is ==> '$@'"
shift # 进行第一次 一个变量的 shift
echo "Total parameter number is ==> $#"
echo "Your whole parameter is ==> '$@'"
shift 3 # 迚行第二次 三个变量的 shift 
echo "Total parameter number is ==> $#"
echo "Your whole parameter is ==> '$@'"

执行结果
[root@www scripts]# sh sh08.sh one two three four five six <==给予六个
参数
Total parameter number is ==> 6 <==最原始的参数变量情况
Your whole parameter is ==> 'one two three four five six'
Total parameter number is ==> 5 <==第一次偏移，看底下发现第一个 one
不见了
Your whole parameter is ==> 'two three four five six'
Total parameter number is ==> 2 <==第二次偏移掉三个，two three four
不见了
Your whole parameter is ==> 'five six'


条件判断式

if...then
1.单层、简单条件判断式
if [ 条件判断式 ]; then
	当条件刞断式成立时，可以进行的指令工作内容；
fi <==将 if 反过来写，就成为 fi 啦！结束 if 之意

范例：
if [ "$yn" == "Y" ] || [ "$yn" == "y" ]; then
echo "OK, continue"
exit 0
fi
if [ "$yn" == "N" ] || [ "$yn" == "n" ]; then
echo "Oh, interrupt!"
exit 0
fi

多重、复杂条件判断式
# 一个条件刞断，分成功迚行不失败迚行 (else)
if [ 条件刞断式 ]; then
	当条件判断式成立时，可以进行的指令工作内容；
else
	当条件判断式不成立时，可以进行的指令工作内容；
fi

# 多个条件判断 (if ... elif ... elif ... else) 分多种不同情况执行
if [ 条件判断式一 ]; then
	当条件判断式一成立时，可以进行的指令工作内容；
elif [ 条件判断式二 ]; then
	当条件判断式二成立时，可以进行的指令工作内容；
else
	当条件判断式一与二均不成立时，可以进行的指令工作内容；
fi

范例：
[root@www scripts]# vi sh09.sh
#!/bin/bash
# Program:
# Check $1 is equal to "hello"
# History:
# 2005/08/28 VBird First release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
if [ "$1" == "hello" ]; then
	echo "Hello, how are you ?"
elif [ "$1" == "" ]; then
	echo "You MUST input parameters, ex> {$0 someword}"
else
	echo "The only parameter is 'hello', ex> {$0 hello}"
fi


netstat -tuln: 取得目前主机有启动的服务
范例：
[root@www scripts]# vi sh10.sh
#!/bin/bash
# Program:
# Using netstat and grep to detect WWW,SSH,FTP and Mail
services.
# History:
# 2005/08/28 VBird First release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
# 1. 先作一些告知的动作而已～
echo "Now, I will detect your Linux server's services!"
echo -e "The www, ftp, ssh, and mail will be detect! \n"
# 2. 开始进行一些测试的工作，并且也输出一些信息
testing=$(netstat -tuln | grep ":80 ") # 侦测看 port 80 在否？
if [ "$testing" != "" ]; then
	echo "WWW is running in your system."
fi
	testing=$(netstat -tuln | grep ":22 ") # 侦测看 port 22 在否？
if [ "$testing" != "" ]; then
	echo "SSH is running in your system."
fi
	testing=$(netstat -tuln | grep ":21 ") # 侦测看 port 21 在否？
if [ "$testing" != "" ]; then
	echo "FTP is running in your system."
fi
testing=$(netstat -tuln | grep ":25 ") # 侦测看 port 25 在否？
if [ "$testing" != "" ]; then
	echo "Mail is running in your system."
fi


范例：
[root@www scripts]# vi sh11.sh
#!/bin/bash
# Program:
# You input your demobilization date, I calculate how many days
# before you demobilize.
# History:
# 2005/08/29 VBird First release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
# 1. 告知用户这支程序的用途，并且告知应该如何输入日期格式？
echo "This program will try to calculate :"
echo "How many days before your demobilization date..."
read -p "Please input your demobilization date (YYYYMMDD
ex>20090401): " date2
# 2. 测试一下，这个输入的内容是否正确？利用正则表达式
date_d=$(echo $date2 | grep '[0-9]\{8\}') # 看看是否有八个数字
if [ "$date_d" == "" ]; then
echo "You input the wrong date format...."
exit 1
fi
# 3. 开始计算日期
declare -i date_dem=`date --date="$date2" +%s` # 退伍日期秒数
declare -i date_now=`date +%s` # 现在日期秒数
declare -i date_total_s=$(($date_dem-$date_now)) # 剩余秒数统计
declare -i date_d=$(($date_total_s/60/60/24)) # 转为日数
if [ "$date_total_s" -lt "0" ]; then # 刞断是否已退伍
echo "You had been demobilization before: " $((-1*$date_d)) "
ago"
else
declare -i date_h=$(($(($date_total_s-$date_d*60*60*24))/60/60))
echo "You will demobilize after $date_d days and $date_h hours."
fi


利用case...esac判断
case $变量名称 in <==关键词为 case ，还有变数前有 $ 
"第一个变量内容") <==每个变量内容建议用双引号括起来，关键词则为小括号)
	程序段
	;; <==每个类删结尾使用两个连续的分号来处理
"第二个变量内容")
	程序段
	;;
*) <==最后一个发量内容都会用 * 来代表所有其他值
	不包含第一个变量内容与第二个变量内容的其他程序执行段
	exit 1
	;;
esac <==最终的 case 结尾 反过来写

范例：
[root@www scripts]# vi sh09-2.sh
#!/bin/bash
# Program:
# Show "Hello" from $1.... by using case .... esac
# History:
# 2005/08/29 VBird First release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
case $1 in
"hello")
	echo "Hello, how are you ?"
	;;
"")
	echo "You MUST input parameters, ex> {$0 someword}"
	;;
*) # 其实就相当亍通配符，0~无穷多个任意字符乀意！
	echo "Usage $0 {hello}"
	;;
esac

范例2：
read -p "Input your choice: " choice 
case $choice in
#case $1 in 
"one")
	echo "Your choice is ONE"
	;;
"two")
	echo "Your choice is TWO"
	;;
"three")
	echo "Your choice is THREE"
	;;
*)
	echo "Usage $0 {one|two|three}"
	;;
esac


利用 function 功能 
function fname(){
	程序段 
}

因为 shell script 的执行方式是由上而下，由左而右，因此在 shell script当中的function的设定一定要在程序的最前面，这样才能够在执行时被找到可用的程序段

 function 也可拥有内建变量，他的内建内量与shell script 很类似，函数名称代表示 $0，而后续接的变量也是以 $1, $2... 来取代，但在function()内的$1与shell script的$1 无关

范例：
[root@www scripts]# vi sh12-3.sh
#!/bin/bash
# Program:
# Use function to repeat information.
# History:
# 2005/08/29 VBird First release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
function printit(){
	echo "Your choice is $1" # 这个 $1 必须要参考底下指令的下达
}
echo "This program will print your selection !"
case $1 in
"one")
	printit 1 # 请注意， printit 指令后面还有接参数
	;;
"two")
	printit 2
	;;
"three")
	printit 3  //Your choice is 3
	;;
*)
	echo "Usage $0 {one|two|three}"
	;;
esac



循环(loop)
while [ condition ] <==中括号内的状态就是判断式
do <==do 是循环的开始
	程序段落
done <==done 是循环的结束

until [ condition ]   
do
	程序段落
done
这种方式恰恰不 while 相反，它说的是：当 condition 条件成立时，就终止循环， 否则就持续进行循环的程序段。
(即条件满足就终止)


范例：1+2+...+100
[root@www scripts]# vi sh14.sh
#!/bin/bash
# Program:
# Use loop to calculate "1+2+3+...+100" result.
# History:
# 2005/08/29 VBird First release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
s=0 # 这是加总的数值发数
i=0 # 这是累计的数值，亦即是 1, 2, 3....
while [ "$i" != "100" ]
do
	i=$(($i+1)) # 每次 i 都会增加 1
	s=$(($s+$i)) # 每次都会加总一次！
done
echo "The result of '1+2+3+...+100' is ==> $s"


for...do...done(固定循环)
for var in con1 con2 con3 ...
do
	程序段
done
1. 第一次循环时， $var 的内容为 con1 ；
2. 第二次循环时， $var 的内容为 con2 ；
3. 第三次循环时， $var 的内容为 con3 ；
4. ....

for num in $(seq 1 100)
do 
	程序段
done

范例：
[root@www scripts]# vi sh16.sh
#!/bin/bash
# Program
# Use id, finger command to check system account's information.
# History
# 2009/02/18 VBird first release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
users=$(cut -d ':' -f1 /etc/passwd) # 撷取账号名称
for username in $users # 开始循环进行
do
	id $username
	finger $username
done

范例2：
[root@www scripts]# vi sh17.sh
#!/bin/bash
# Program
# Use ping command to check the network's PC state.
# History
# 2009/02/18 VBird first release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
network="192.168.1" # 先定义一个网域的前面部分
for sitenu in $(seq 1 100) # (!!!重要)seq 为 sequence(连续)的缩写之意
do
	# 取得 ping 的回传值是正确的还是失败的
	ping -c 1 -w 1 ${network}.${sitenu} &> /dev/null && result=0 ||
	result=1
	# 开始显示结果是正确的启动(UP)还是错误的没有连通 (DOWN)
	if [ "$result" == 0 ]; then
		echo "Server ${network}.${sitenu} is UP."
	else
		echo "Server ${network}.${sitenu} is DOWN."
	fi
done

范例3：
[root@www scripts]# vi sh18.sh
#!/bin/bash
# Program:
# User input dir name, I find the permission of files.
# History:
# 2005/08/29 VBird First release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
# 1. 先看看这个目录是否存在啊？
read -p "Please input a directory: " dir
if [ "$dir" == "" -o ! -d "$dir" ]; then
	echo "The $dir is NOT exist in your system."
exit 1
fi
# 2. 开始测试档案
filelist=$(ls $dir) # 列出所有在该目录下的文件名
for filename in $filelist
do
	perm=""
	test -r "$dir/$filename" && perm="$perm readable"
	test -w "$dir/$filename" && perm="$perm writable"
	test -x "$dir/$filename" && perm="$perm executable"
	echo "The file $dir/$filename's permission is $perm "
done


for((初始值;限制值;执行步阶))
do
	程序段
done

[root@www scripts]# vi sh19.sh
#!/bin/bash
# Program:
# Try do calculate 1+2+....+${your_input}
# History:
# 2005/08/29 VBird First release
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
read -p "Please input a number, I will count for 1+2+...+your_input: " nu
s=0
for (( i=1; i<=$nu; i=i+1 ))
do
	s=$(($s+$i))
done
echo "The result of '1+2+3+...+$nu' is ==> $s"


shell script的追踪与debug

sh [-nvx] scripts.sh 
选项与参数：
-n: 不要执行script,仅查询语法的问题
-v: 再执行script前，先将scripts的内容输出到屏幕上
-x: 将使用到的script内容显示到屏幕上 （重要）


















