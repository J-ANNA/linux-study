学习shell scripts
shell script(程序化脚本): 是利用shell的功能所写的一个program,这个程序使用纯文本文件，将一些shell的语法与指令(含外部指令)写在里面，搭配正则表达式、管线命令与数据流量导向等功能，以达到我们所想要的处理目的。

在 shell script 的编写中需要注意的事项：
1. 指令的执行是从上而下、从左而右的分析与执行；
2. 指令、选项与参数间的多个空白都会被忽略掉；
3. 空白行也将被忽略掉，并且[tab]按键所推开的空白同样视为空格键；
4. 如果读取到一个Enter符号(CR)，就尝试开始执行该行(或该串)命令；
5. 如果一行的内容太多则可以使用 \[Enter] 来延伸至下一行；
6. # 可做为批注！任何加在 # 后面的资料将全部被视为批注文字而被忽略！

如此一来，我们在script内所编写的程序，就会被一行一行的执行。现在我们假设你写的这个程序文件名是/home/dmtsai/shell.sh。好了，那如何执行这个档案？很简单，可以有底下几个方法：
1. 直接指令下达：shell.sh档案必须要具备可读于可执行(rx)权限，然后：
	o 绝对路径：使用 /home/dmtsai/shell.sh 来下达指令；
	o 相对路径：假讴工作目录在 /home/dmtsai/，则使用./shell.sh来执行
	o 变量 PATH 功能：将 shell.sh 放在PATH指定的目录内，例如：~/bin/
2. 以 bash 程序来执行：透过 bash shell.sh 或 sh shell.sh 来执行

script编写过程
1. 第一行 #!/bin/bash 宣告这个script使用的shell名称；(必须添加)
2. 程序内容说明：内容与功能；版本信息；作者与联络方式；建档日期；历史记录
3. 主要环境变量的宣告：如PATH与LANG
4. 主要程序部分
5. 执行结果告知(定义回传值)


script 的执行方式差异 (source, sh script, ./script)
利用直接执行的方式执行(sh script, ./script) script,(子)程序执行完之后，各项变量或动作不会回传到父程序中
利用source来执行script: 直接在父程序中执行，会保存变量或动作


利用test指令的测试功能
执行结果并不会显示任何讯息，但最后我们可以透过 $? 或 && 及 ||来展现整个结果
例如：
test -e /dmtsai && echo "exist" || echo "not exist"
测试的标志     意义
1. 关于某个档名的"文件类型"判断，如 test -e filename
-e             该"文件名"是否存在(常用)
-f             该"文件名"是否存在且为文档(file)
-d             该"文件名"是否存在且为目录(directory)
-b             该"文件名"是否存在且为一个 block device 装置
-c             该"文件名"是否存在且为一个 character device 装置
-S             该"文件名"是否存在且为一个Socket 文档
-p             该"文件名"是否存在且为一个FIFO(pipe)文档
-L             该"文件名"是否存在且为一个连结文档
2. 关于文档的权限侦测，如 test -r filename
-r             侦测该"文件名"是否存在且具有"可读"的权限
-w             侦测该"文件名"是否存在且具有"可写"的权限
-x             侦测该"文件名"是否存在且具有"可执行"的权限
-u             侦测该"文件名"是否存在且具有"SUID"的权限
-g             侦测该"文件名"是否存在且具有"SGID"的权限
-k             侦测该"文件名"是否存在且具有"Sticky bit"的权限
-s             侦测该"文件名"是否存在且为"非空白文档"
3. 两个文档之间的比较，如：test file1 -nt file2
-nt            (newer than)判断file1是否比file2新
-ot            (older than)判断file1是否比file2旧
-ef            判断file1与file2是否为同一文档，可用在判断hard link
               的判定上。主要意义在判定两个文档是否均指向同一个inode
4.关于两个整数之间的判定，如test n1 -eq n2
-eq            两数值相等(equal)
-ne            量数值不等(not equal)
-gt            n1 大于 n2(greater than)
-lt            n1 小于 n2(less than)
-ge            n1 大于等于 n2(greater than or equal)
-le            n1 小于等于 n2(less than or equal)
5. 判定字符串的数据
test -z string  判定字符串是否为0? 若string为空字符串，则为 true
test -n string  判定字符串是否为非0? 若string为空字符串，则为false(-n可忽略)
test str1 = str2  判定str1是否等于str2，若相等，则回传true
test str1 != str2  判定str1是否不等于str2，若相等，则回传 false
6. 多重条件判定，如 test -r filename -a -x filename 
-a        (and)两状况同时成立
-o        (or)两状况任何一个成立
!         反向状态，如 test ! -x file, 当file 不具有 x 时，回传 true

范例：
#!/bin/bash
#program:
#user input a filename,program will check the flowing:
#  1)exist?  2)file/firectory? 3)file permissions
#history:
2018/05/21  qinshijie  first release

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

echo -e "Please input a filename,I will check the filename's type and permission.\n\n"
read -p "Input a filename:" filename
test -z $filename && echo "you must input a filename." && exit 0
test ! -e $filename && echo "the filename $filename do not exist" && exit 0
test -f $filename && filetype= "regulare file"
test -d $filename && filetype= "directory"
test -r $filename && perm="readable"
test -w $filename && perm="$perm writable"
test -x $filename && perm="$perm executable"

echo "the filename: $filename is a $filetype"
echo "And the permission are: $perm" 


















