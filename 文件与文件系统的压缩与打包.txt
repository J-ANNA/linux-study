常见的压缩文件扩展名：
*.Z      compress 程序的压缩文件   //方法老旧，不常用
*.gz     gzip 程序压缩的文件
*.bz2    bzip2 程序压缩的文件
*.tar    tar程序打包的数据，并没有压缩过
*.tar.gz   tar程序打包的文件，其中经过gzip的压缩
*.tar.bz2  tar程序打包的文件，其中经过bzip2的压缩


compress
compress [-rcv] 文件或目录     //压缩
参数：
-r: 可以连同目录下的文件也同时给予压缩；
-c: 将压缩数据输出成为 standard output (输出到屏幕)；
-v: 可以显示出压缩后的文件信息以及压缩过程中的一些文件变化。

范例：
cd /tmp
cp /etc/man.config .
compress -v man.config
ls -l /etc/man.config /tmp/man*
(在默认情况中，被compress压缩的源文件会不见，而压缩文件会被创建起来，而且扩展名是 *Z)

范例：保留源文件
compress -c man.config > man.config.back.Z

uncompress 文件.Z        //解压
范例：
uncompress man.config.Z
ll man*


gzip,zcat      //重要：使用gzip压缩的文件在windows系统中，可以被WinRAR这个软件解压缩
应用最广的压缩命令。目前gzip可以解开compress、zip与gzip等软件压缩的文件。gzip所新建的压缩文件为 *.gz 的文件名。
gzip [-cdtv#] 文件名     //压缩与解压
zcat 文件名.gz           //将压缩文件的内容读出来，而不是解压缩
参数：
-c: 将压缩的数据输出到屏幕上，可通过数据流重定向来处理；
-d: 解压缩的参数；                                        //重要：解压
-t: 可以用来检测一个压缩文件的一致性，看看文件有无错误；
-v: 可以显示出原文件/压缩文件的压缩比等信息；
-#: 压缩等级，-1最快，但是压缩比最差，-9最慢，但是压缩比最好默认是 -6。 //#代表数字：1-9

范例：压缩
cd /tmp
cp /etc/man.config .
gzip -v man.config
ll /etc/man.config /tmp/man*

范例：读取压缩文件内容
zcat man.config.gz

范例：解压缩
gzip -d man.config.gz

范例：将man.config 用最佳的压缩比压缩，并保留原来的文件
gzip -9 -c man.config > man.config.gz


bzip2,bzcat //比gzip好一点，用法大体相同
bzip2 [-cdkzv#] 文件名
bzcat 文件名.bz2
参数：
-c: 将压缩过程中产生的数据输出到屏幕上；
-d: 解压缩的参数；   //也可以使用 bunzip2 这个命令来替代 bzip2 -d 
-k: 保留原文件，而不会删除原始的文件；
-z: 压缩的参数；
-v: 可以显示原文件/压缩文件的压缩比等信息；
-#: 与gzip同样的，都是在计算压缩比的参数， -9 最佳， -1 最快。

范例：
bzip2 -z man.config
bzcat man.config.bz2
bzip2 -d man.config.bz2
bzip2 -9 -c man.config > man.config.bz2

(此外，当你要解开一个压缩文件时，这个文件的名称为 .bz, .bz2, tbz, .tbz2等)


打包命令：tar
tar [-j|-z] [cv] [-f 新建的文件名] filename...    //打包与压缩
tar [-j|-z] [tv] [-f 新建的文件名]                //查看文件名
tar [-j|-z] [xv] [-f 新建的文件名] [-C 目录]      //解压缩
参数：
-c: 新建打包文件，可搭配 -v 来查看过程中被打包的文件名；
-t: 查看打包文件的内容含有哪些文件名，重点在查看文件名；
-x: 解打包或解压缩的功能，可以搭配 -C 在特定目录中解开。
	(特别留意：-c, -t,-x 不可同时出现在一串命令行中)
-j: 通过 bzip2 的支持进行压缩/解压缩，此时的文件名最好为 *.tar.bz2
-z: 通过 gzip 的支持进行压缩/解压缩，此时的文件名最好为 *.tar.gz
-v: 在压缩/解压缩的过程中，将正在处理的文件名显示出来
-f filename: -f 后面要接被处理的文件名。建议 -f 单独写一个参数。
-C 目录: 这个参数用在解压缩时，若要在特定目录解压缩，可以使用这个参数
-p: 保留备份数据的原本权限与属性，常用于备份(-c)重要的配置文件
-P: 保留绝对路径，即允许备份数据中含有根目录存在之意
--exclude=FILE: 在压缩的过程中，不要将FILE打包


最简单的使用tar的方式：
压缩: tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称
查询: tar -jtv -f filename.tar.bz2 
解压缩: tar -jxv -f filename.tar.bz2 -C 欲解压的目录

范例：
tar -zpcv -f /root/etc.tar.gz /etc
tar -jpcv -f /root/etc/tar.bz2 /etc
tar -jtv -f /root/etc.tar.bz2
tar -jxv -f /root/etc.tar.bz2 -C /tmp

解开单一文件
tar -jxv -f 打包文件.tar.bz2 待解开文件名      
范例：
tar -jxv -f test3.tar.bz2 test3/test2/1.txt
tar -jxv -f test3.tar.bz2 -C test4 test3/test2/1.txt      //解压到test4文件夹  指定解压文件放在最后面

打包某目录，但不含该目录下的某些文件
tar -jcv -f /root/system.tar.bz2 --exclude=/root/etc* --exclude=/root/system.tar.bz2 /etc /root 

(注意：多个文件夹打包后，解压时不是生成打包时的命名文件夹（system），而解压为打包之前的多个文件夹(etc  root))


备份 restore
restore -t [-f dumpfile] [-h]    //用来查看 dump 文件
restore -C [-f dumpfile] [-D 挂载点]    //比较dump与实际文件
restore -i [-f dumpfile]            //进入互动模式
retore -r [-f dumpfile]             //还原整个文件系统
参数：
相关的各种模式，各种模式无法混用。例如不可以写 -tC 
-t: 查看dump起来的备份文件中含有什么重要的数据。类似 tar -t 功能
-C: 将 dump 内的数据拿出来跟实际的文件系统做比较，
    最终会列出 “在dump文件内有记录的，且目前文件系统不一样的” 文件
-i: 进入互动模式，可以仅还原部分文件，用在 dump 目录时的还原。
-r: 将整个文件系统还原的一种模式，用在还原针对文件系统的 dump 备份。
其他较常用到的参数功能：
-h: 查看完整备份数据中的 inode 与文件系统 label 等信息
-f: 后面接要处理的那个 dump 文件
-D: 与 -C 进行搭配，可以查出后面接的挂载点与 dump 内有不同的文件。

范例：用restore 查看 dump 后的备份数据内容
restore -t -f /root/boot.dump

范例：还原文件系统
由于dump是记录整个文件系统的，因此还原时也应该给予一个全新的文件系统才行
1.新建一个的分区来使用
fdisk /dev/hdc
n
+150M
p
partprobe

mkfs -t ext3 /dev/hdc8
mount /dev/hdc8 /mnt
2.开始进行还原操作，务必回到新文件系统的挂载点下面
cd /mnt 
restore -r -f /root/boot.dump


仅还原部分文件的 restore 互动模式
cd /mnt
restore -i -f /root/etc.dump
help
ls
cd etc
pwd
LS passwd shadow group
add pass shadow group
delete group
ls passwd shadow group
extract
quit
ll -d etc
ll etc


光盘写入工具
1.先将所需要的备份数据构建成一个镜像文件(iso),利用 mkisofs 命令来处理；
2.将该镜像文件刻录至光盘或DVD当中，利用 cdrecord 命令来处理

mkisofs: 新建镜像文件
mkisofs: [-o 镜像文件] [-rv] [-m file] 待备份文件 [-V vol] -graft-point isodir=systemdir ...
参数：
-o: 后面接想要产生的镜像文件名
-r: 通过 Rock Ridge 产生支持 UNIX/Linux 的文件数据，可记录较多信息 （常用）
-v: 显示 ISO 文件的过程
-m file: -m 为排除文件(exclude)的意思，后面的文件不备份到镜像文件中
-V vol: 新建 Volume
-graft-point: 定位位于镜像文件中的目录（/linux/etc=/etc:将 Linux 中的 /etc 所有数据备份到镜像文件中的 linux/etc目录中）

范例：将 /root, /home, /etc 等目录内的数据全部刻录起来
mkisofs -r -v -o /tmp/system.img /root /home /etc
ll -h /tmp/system.img 
mount -o loop/tmp/system.img /mnt
df -h
ls /mnt
umount /mnt

范例：使用 -graft-point(镜像文件中root目录等于linux中的root)
mkisofs -r -V 'linux_file' -o /tmp/system.img \
> -m /home/lost+found -graft-point /root=/root /home=/home /etc=/etc

mount -o loop /tmp/system.img /mnt
ll /mnt
umount /mnt


cdrecord: 光盘刻录工具
cdrecord -scanbus dev=ATA   //查询刻录机位置
cdrecord -v dev=ATA:x,y,z blank=[fast|all]   //抹除重复读写片
cdrecord -v dev=ATA:x,y,z -format  //格式化 DVD+RW
cdrecord -v dev=ATA:x,y,z [可用参数功能] file.iso
参数：
-scanbuS: 用在扫描磁盘总线并找出可用的刻录机，后续的设备为 ATA 接口
-v: 在cdrecord 运行的过程中，显示过程。
dev=ATA:x,y,z: 后续的 x,y,z 为你系统上刻录机所在的位置，非常重要！
blank=[fast|all]: blank 为抹除可重复写入的CD/DVD-RW，使用 fast较快，all较完整。
-format: 仅针对 DVD+RW 这种格式的DVD而已。
[可用参数功能] 主要写入 CD/DVD 时可使用的参数，常见的参数包括：
    -data: 指定后面的文件以数据格式写入，不是以 CD 音轨(-audio)方式写入。
    speed=X: 指定刻录速度，例如 CD 可用 speed=40 为40倍数，DVD则可用 speed=4 之类。
-eject: 指定刻录完毕后自动退出光盘。
fs=Ym: 指定多少缓冲存储器，可用在将镜像文件先暂存至暂存区。默认 4M,一般建议可增加到 8M,不过，还是的视刻录机而定。
针对DVD的参数功能：
  driveropts=burnfree: 打开 Buffer Underrun Free 模式的写入功能
  -sao: 支持 DVD-RW 的格式 


范例：检测刻录机所在位置
cdrecord -scanbus dev=ATA

范例：进行CD的刻录操作
1. 先抹除光盘的原始内容（非可重复读写则可忽略此步骤）：
cdrecord -v dev=ATA:1,1,0 blank=fast
2.开始刻录
cdrecord -v dev=ATA:1,1,0 fs=8m -dummy -data /tmp/system.img
3.刻录完毕后，测试挂载一下，检验内容
mount -t iso9660 /dev/cdrom /mnt
df -h /mnt
ll mnt
umount /mnt

范例：进行DVD-RW的刻录操作
1.同样，先抹除原本的内容
cdrecord -v dev=ATA:1,1,0 blank=fast
2.开始写入DVD,请注意，有些参数与CD并不相同
cdrecord -v dev=ATA:1,1,0 fs=8m -data -sao driveropts=burnfree /tmp/system.img
3.同样，进行测试
mount /dev/cdrom /mnt 
df -h /mnt
umount /mnt

































































