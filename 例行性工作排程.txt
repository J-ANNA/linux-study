例行性工作排程(crontab)

Linux工作排程的种类: at,cron
at: at是一个可以处理仅执行一次就结束排程的指令，不过要执行 at 时，必须要有 atd 这个服务的支持。某些distributions是预启动的，若未启动需手动启动
crontab: crontab这个指令所设定的工作将会循环的一直进行下去。可循环的时间为分钟、小时、每周、每月或每年等。crontab除了可以使用指令执行外，亦可编辑/etc/crontab来支持。至于让crontab可以生效的服务则是crond这个服务。

仅执行一次的工作排程
atd的启动与at运作的方式

手动启动 atd 
[root@www ~]# /etc/init.d/atd restart
#设定开机自动启动
[root@www ~]# chkconfig atd on

利用 /etc/at.allow 与 /etc/at.deny 这两个档案来进行at的使用限制。at的工作情况：
1.先找寻 /etc/at.allow 这个档案，写在这个档案中的使用者才能使用 at,没有在这个档案中的使用者则不能使用at(即使没有写在at.deny当中)
2.如果 /etc/at.allow 不存在，就寻找 /etc/at.deny 这个文档，若写在这个 at.deny 的使用者则不能使用 at,而没有在这个at.deny文档中的使用者，就可以使用at;
3.如果两个档案都不存在，那么只有root可以使用at这个指令。

实际运作单一工作排程
[root@www ~]# at [-mldv] TIME
[root@www ~]# at -c 工作号码
选项与参数：
-m: 当 at 的工作完成后，即使没有输出讯息，亦以 email 通知使用者该工作已完成。
-l: at -l 相当于 atq,列出目前系统上面的所有该用户的 at 排程;
-d: at -d 相当于 atrm,可以取消一个在 at 排程中的工作;
-v: 可以使用较明显的时间格式列出 at 排程中的任务列表;
-c: 可以列出后面接的该项工作的实际指令内容。
TIME: 时间格式，定义 什么时候进行 at 这项工作
HH:MM                              ex: 04:00
HH:MM YYYY-MM-DD                   ex: 04:00 2009-03-17
HH:MM[am|pm] [Month][Date]         ex: 04pm March 17
HH:MM[am|pm] + number [minutes|hours|days|weeks]  ex: now + 5 minutes    ex: 04pm + 3 days 

范例1：再过五分钟后，将 /root/.bashrc 寄给 root 自己
[root@www ~]# at now + 5 minutes <==记得单位要加 s 
at> /bin/mail root -s "testing at job" < /root/.bashrc
at> <EOT> <==这里输入 [ctrl] + d 就会出现 <EOF> 的字样，代表结束
job 4 at 2009-03-14 15:38
# 上面这行信息在说明，第 4 个 at 工作将在 2009/03/14 的15:38 进行
# 而执行 at 会进入所谓的 at shell 环境，让你下达多重指令等待运作

范例2：将上述的第4项工作内容列出来查阅
[root@www ~]# at -c 4
#!/bin/sh <==就是透过 bash shell 
# atrun uid=0 gid=0
# mail root 0
umask 22
....(中间省略许多的环境变量项目)....
cd /root || { <==可以看出，会到下达 at 的工作目录去执行指令
echo 'Execution directory inaccessible' >&2
exit 1
}
/bin/mail root -s "testing at job" < /root/.bashrc
# 你可以看到指令执行的目录 (/root)，还有多个环境变量与实际的指令内容


范例三：在 2009/03/17 23:00 关机
[root@www ~]# at 23:00 2009-03-17
at> /bin/sync
at> /bin/sync
at> /sbin/shutdown -h now
at> <EOT>
job 5 at 2009-03-17 23:00
# at 可以在一个工作内输入多个指令

(注意：
1.当我们使用 at 时会进入一个 at shell的环境来让用户下达工作指令，此时，建议最好使用绝对路径来下达指令，比较不会有问题;
2. at 的执行与终端机环境无关，而所有 standard output/standard error output 都会传送到执行者的 mailbox 去，所以例如"echo "hello"",不会再终端机显示，可以透过终端机的装置来处理，假如在tty1登入，则可以使用"echo "hello" > /dev/tty1"来取代)

at的另外一个优点，那就是"背景执行"的功能。

at工作的管理
[root@www ~]# atq
[root@www ~]# atrm [jobnumber]

范例1：查询目前主机上面有多少的at工作排程
[root@www ~]# atq
5        2009-03-17  23:00  a  root
#在2009/03/17的23:00有一项工作，该项工作指令下达着为 root，该项工作的号码(jobnumber)为5号

范例2：将上述的第5个工作移除
[root@www ~]# atrm 5
[root@www ~]# atq

batch: 系统有空时才进行背景任务，他会在CPU工作负载小于0.8的时候，才进行下达的工作任务。

范例1：同样是在 2009/3/17 23:00 关机，但若当时系统负载太高，则暂缓执行
[root@www ~]# batch 23:00 2009-3-17
at> sync
at> sync
at> shutdown -h now
at> <EOT>
job 6 at 2009-03-17 23:00

[root@www ~]# atq
6 2009-03-17 23:00 b root
[root@www ~]# atrm 6
(batch也是使用 atq/qtrm来管理)

循环执行的例行性工作排程
使用者的设定
1. /etc/cron.allow: 将可用使用 crontab 的账号写入其中，若不在这个档案内的使用者则不可使用crontab;
2. /etc/cron.deny: 将不可以使用crontab 的账号写入其中，若未记录到这个文档中的使用者，就可以使用 crontab。
(以优先级来说， /etc/cron.allow 比 /etc/cron.deny 要优先， 而判断上面，这两个档案只选择一个来限制而已，因此，只要保留一个即可)
当用户使用 crontab这个指令来建立工作排程之后，该项工作就会被记录到 /var/spool/cron/ 里面去，而且是以账号来作为判别。指令下达时最好使用绝对路径。

crontab [-u username] [-l|-e|-r]
选项与参数：
-u: 只有username才能执行此参数，亦即帮其他使用者建立/移除 crontab工作排程;
-e: 编辑 crontab 的工作内容;
-l: 查阅 crontab 的工作内容;
-r: 移除所有的 crontab 的工作内容，若仅要移除一项，请用 -e 去编辑。

范例1：用 dmtsai 的身份在每天的 12:00 发信给自己
[dmtsai@www ~]$ crontab -e
# 此时会进入vi 的编辑画面编辑工作，注意到，每项工作都是一行。
0 12 * * * mail dmtsai -s "at 12:00" < /home/dmtsai/.bashrc
#分 时 日 月 周 |<==============指令串
========================>|

特殊字符              代表意义
*            代表任何时刻都接受       0 12 * * * command 
,            代表分隔时段             0 3,6 * * * command 
-            代表一段时间范围内       20 8-12 * * * command 
/n           代表 "每隔 n 单位间隔"   */5 * * * * command


查询使用者目前的 crontab内容
[dmtsai@www ~]$ crontab -l


系统的配置文件: /etc/crontab
crontab -e 这个 crontab 其实是 /usr/bin/crontab 这个执行档，但是 /etc/crontab 是一个 "纯文本档"，可以用root身份编辑该文档。

基本上， cron 这个服务的最低侦测限制是 "分钟"，所以 cron 会每分钟去读取一次 /etc/crontab 与 /var/spool/cron 里面的数据内容，因此，只要编辑完 /etc/crontab 这个档案，并且将他储存之后，那么 cron 的设定就自动的会来执行。
(在你修改完 /etc/crontab 之后，可能并不会马上执行，这个时候请
重新启动 crond 这个服务。"/etc/init.d/crond restart"


查看 /etc/crontab 的内容
[root@www ~]# cat /etc/crontab
SHELL=/bin/bash    <==使用哪种 shell 接口
PATH=/sbin:/bin:/usr/sbin:/usr/bin   <==执行文件搜寻路径
MAILTO=root   <==若有额外 STDOUT，以 email 将数据送给谁
HOME=/    <==默认此 shell 的家目录所在
# run-parts
01 * * * * root run-parts /etc/cron.hourly <==每小时
02 4 * * * root run-parts /etc/cron.daily <==每天
22 4 * * 0 root run-parts /etc/cron.weekly <==每周日
42 4 1 * * root run-parts /etc/cron.monthly <==每个月 1 号
分 时 日 月 周 执行者身份 指令串
(run-parts: 将后面接的目录内的所有文档拿出来执行)

/etc/crontab 这个文档里支持两种下达指令的方式：
1. 指令型态
01 * * * * dmtsai mail -s "testing" kiki < /home/dmtsai/test.txt
以 dmtsai 这个使用者的身份，在每小时执行一次 mail 指令。
2. 目录规划
*/5 * * * * root run-parts /root/runcron
建立一个 /root/runcron的目录，将要每隔五分钟执行的 "可执行文件"都写到该目录下,就可以让系统每五分钟执行一次该目录下的所有可执行文件。

一些注意事项：
1.资源分配不均的问题，分时段进行；
2.取消不要的输出项目，将不必要的输出结果输出到 /dev/null 这个垃圾桶
3.安全的检验
4.周与日月不可同时并存


anacron: 可唤醒停机期间的工作任务
[root@www ~]# anacron [-sfn] [job]..
[root@www ~]# anacron -u [job]..
选项与参数：
-s: 开始一连续的执行各项工作(job),会依据时间记录文件的数据判断是否进行;
-f: 强制进行，而不去判断时间记录文件的时间戳;
-n: 立刻进行未进行的任务，而不延迟(delay)等待时间;
-u: 仅更新时间记录文件的时间戳，不进行任何工作;
job: 由/etc/anacrontab定义的各项工作名称。

查看 /etc/anacrontab 的内容
[root@www ~]# cat /etc/anacrontab
SHELL=/bin/sh
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=root
1 65 cron.daily run-parts /etc/cron.daily
7 70 cron.weekly run-parts /etc/cron.weekly
30 75 cron.monthly run-parts /etc/cron.monthly
天数 延迟时间 工作名称定义 实际要进行的指令串
# 天数单位为天;延迟时间单位为分钟;工作名称定义可自定义;
# 指令串则通常与 crontab 的设定相同

anacron运作情况：
1. 由 /etc/anacrontab 分析到 cron.daily 这项工作名称的天数为1天；
2. 由 /var/spool/anacron/cron.daily 取出最近一次执行 anacron的时间戳；
3. 由上个步骤与目前的时间比较，若差异天数为 1 天以上 (含 1 天)，就准备进行指令；
4. 若准备进行指令，根据 /etc/anacrontab 的设定，将延迟 65 分钟；
5. 延迟时间过后，开始执行后续指令，亦即 run-parts /etc/cron.daily 这串指令；
6. 执行完毕后， anacron 程序结束。

确认anacron是否开机时主动执行
[root@www ~]# chkconfig --list anacron
anacron 0:off 1:off 2:on 3:on 4:on 5:on 6:off
# 注意看 3, 5的项目，都是 on，那就是有启动，开机时才会执行的意思

































