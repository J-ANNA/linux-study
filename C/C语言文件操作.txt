C语言文件操作

参考链接：https://blog.csdn.net/freeking101/article/details/60959624

#include stdio.h

typedef struct
{
    short           level;          /* fill/empty level of buffer */
    unsigned        flags;          /* File status flags    */
    char            fd;             /* File descriptor      */
    unsigned char   hold;           /* Ungetc char if no buffer */
    short           bsize;          /* Buffer size          */
    unsigned char   *buffer;        /* Data transfer buffer */
    unsigned char   *curp;          /* Current active pointer */
    unsigned        istemp;         /* Temporary file indicator */
    short           token;          /* Used for validity checking */
}FILE;    /* This is the FILE object */
FILE这个结构包含了文件操作的基本属性，对文件的操作都要通过这个结构的指针来进行。



C语言中没有输入输出语句，所有的输入输出功能都用 ANSI C提供的一组标准库函数来实现。文件操作标准库函数有：
		 文件的打开操作 fopen 打开一个文件
　　 　　 文件的关闭操作 fclose 关闭一个文件
　　 　　 文件的读写操作 fgetc 从文件中读取一个字符
　　 　　 　　　　　　　 fputc 写一个字符到文件中去
　　 　　 　　　　　　　 fgets 从文件中读取一个字符串
　　 　　 　　　　　　　 fputs 写一个字符串到文件中去
　　 　　 　　　　　　　 fprintf 往文件中写格式化数据
　　 　　 　　　　　　　 fscanf 格式化读取文件中数据
　　 　　 　　　　　　　 fread 以二进制形式读取文件中的数据
　　 　　 　　　　　　　 fwrite 以二进制形式写数据到文件中去
　　 　　 　　　　　　　 getw 以二进制形式读取一个整数
　　 　　 　　　　　　　 putw 以二进制形式存贮一个整数
　　   文件状态检查函数  feof 文件结束
　　 　　 　　　　　　　 ferror 文件读/写出错
　　 　　 　　　　　　　 clearerr 清除文件错误标志
　　 　　 　　　　　　　 ftell 了解文件指针的当前位置
 
　　　      文件定位函数 rewind 反绕
　　 　　 　　　　　　　 fseek 随机定位


文件的打开
1．函数原型：FILE *fopen(char *pname,char *mode)
2．功能说明
　　 按照mode 规定的方式，打开由pname指定的文件。若找不到由pname指定的相应文件，就按以下方式之一处理：
       （1） 此时如mode 规定按写方式打开文件，就按由pname指定的名字建立一个新文件；
       （2） 此时如mode 规定按读方式打开文件，就会产生一个错误。

        打开文件的作用是：
        （1）分配给打开文件一个FILE 类型的文件结构体变量，并将有关信息填入文件结构体变量；
        （2）开辟一个缓冲区；
        （3）调用操作系统提供的打开文件或建立新文件功能，打开或建立指定文件；
        FILE *：指出fopen是一个返回文件类型的指针函数；

3．参数说明
	pname：是一个字符指针，指向要打开的文件名。
	mode：是一个指向文件处理方式字符串的字符指针。
	字符串 含义
	"r" 打开只读文件，该文件必须存在。
	"w" 打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失。若文件不存在则建立该文件。
	"a" 以追加方式打开只写文件。文件不存在建立该文件，如文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留。
	"r+" 以读/写方式打开文件，该文件必须存在。如无文件则出错
	"w+" 以读/写方式打开文件，若文件存在则文件长度清为零，即文件内容清空。若文件不存在则建立该文件。

系统默认的是以文本模式打开，可以修改全部变量_fmode的值来修改这个设置，例如_fmode=O_TEXT；就设置默认打开方式为文本模式；而_fmode=O_BINARY；则设置默认打开方式是二进制模式。
　　我们也可以在模式字符串中指定打开的模式，如"rb"表示以二进制模式打开只读文件，"w+t"或"wt+"表示以文本模式打开读/写文件。
　　此函数返回一个FILE指针，所以申明一个FILE指针后不用初始化，而是用fopen()来返回一个指针并与一个特定的文件相连，如果成败，返回NULL。

4．返回值
　　　正常返回：被打开文件的文件指针。
　　　异常返回：NULL，表示打开操作不成功。

例：
	//定义一个名叫fp文件指针
	FILE *fp；
	//判断按读方式打开一个名叫test的文件是否失败
	if((fp=fopen（"test"，"r"）) == NULL)//打开操作不成功
	{
	    printf("The file can not be opened.\n")；    　
	    exit(1);//结束程序的执行
	}
	FILE *fp;
	if(fp=fopen("123.456","wb"))
	    puts("打开文件成功");
	else
	    puts("打开文件成败");



freopen（打开文件）
相关函数 fopen，fclose
表头文件 #include<stdio.h>
定义函数 FILE * freopen(const char * path,const char * mode,FILE * stream);
函数说明 参数path字符串包含欲打开的文件路径及文件名，参数mode请参考fopen()说明。参数stream为已打开的文件指针。Freopen()会将原stream所打开的文件流关闭，然后打开参数path的文件。
返回值 文件顺利打开后，指向该流的文件指针就会被返回。如果文件打开失败则返回NULL，并把错误代码存在errno 中。


例：
#include<stdio.h>
main()
{
FILE * fp;
fp=fopen(“/etc/passwd”,”r”);
fp=freopen(“/etc/group”,”r”,fp);
fclose(fp);
}


文件的关闭
1． 函数原型：int fclose(FILE *fp)；

2． 功能说明
　　关闭由fp指出的文件。此时调用操作系统提供的文件关闭功能，关闭由fp->fd指出的文件；释放由fp指出的文件类型结构体变量；返回操作结果，即0或EOF。

3． 参数说明
　　fp：一个已打开文件的文件指针。

4． 返回值
　　正常返回：0。
　　异常返回：EOF，表示文件在关闭时发生错误。

例：
	int n=fclose(fp);


文件的读写操作
1. 从文件中读取一个字符
1． 函数原型：int fgetc(FILE *fp)；

　　2． 功能说明：从fp所指文件中读取一个字符。　　　

　　3． 参数说明：fp：这是个文件指针，它指出要从中读取字符的文件。　　　

　　4． 返回值
　　　　正常返回： 返回读取字符的代码。
　　　　非正常返回：返回EOF。例如，要从"写打开"文件中读取一个字符时，会发生错误而返回一个EOF。

注：读取字符后，指针自动向后移一位


2. 写一个字符到文件中去
1． 函数原型：int fputc(int ch,FILE *fp)
2． 功能说明：把ch中的字符写入由fp指出的文件中去。　

3． 参数说明
　　ch：是一个整型变量，内存要写到文件中的字符（C语言中整型量和字符量可以通用）。
　　fp：这是个文件指针，指出要在其中写入字符的文件。

4． 返回值
　　正常返回： 要写入字符的代码。
　　非正常返回：返回EOF。例如，要往"读打开"文件中写一个字符时，会发生错误而返回一个EOF。




3. 从文件中读取一个字符串
1． 函数原型：char *fgets(char *str,int n,FILE *fp)
2． 功能说明
　　从由fp指出的文件中读取n-1个字符，并把它们存放到由str指出的字符数组中去，最后加上一个字符串结束符'\0'。
3． 参数说明
　　str：接收字符串的内存地址，可以是数组名，也可以是指针。
　　n： 指出要读取字符的个数。
　　fp：这是个文件指针，指出要从中读取字符的文件。
4． 返回值
正常返回：返回字符串的内存首地址，即str的值。
非正常返回：返回一个NULL值，此时应当用feof()或ferror()函数来判别是读取到了文件尾，还是发生了错误。例如，要从"写打开"文件中读取字符串，将发生错误而返回一个NULL值。



4. 写一个字符串到文件中去
1． 函数原型：int fputs(char *str,FILE *fp)
2． 功能说明
　　把由str指出的字符串写入到fp所指的文件中去。
3． 参数说明
　　str：指出要写到文件中去的字符串。
　　fp：这是个文件指针，指出字符串要写入其中的文件。
4． 返回值
　　正常返回： 写入文件的字符个数，即字符串的长度。
　　非正常返回：返回一个NULL值，此时应当用feof()或ferror()函数来判别是读取到了文件尾，还是发生了错误。例如，要往一个"读打开" 文件中写字符串时，会发生错误而返回一个NULL值。


5. 往文件中写格式化数据
1．函数原型：int fprintf(FILE *fp,char *format,arg_list)
2．功能说明
　　将变量表列（arg_list）中的数据，按照format指出的格式，写入由fp指定的文件。fprintf()函数与printf()函数的功能相同，只是printf()函数是将数据写入屏幕文件（stdout）。
3．参数说明
　　fp：这是个文件指针，指出要将数据写入的文件。
　　format：这是个指向字符串的字符指针，字符串中含有要写出数据的格式，所以该字符串成为格式串。格式串描述的规则与printf()函数中的格式串相同。
arg_list：是要写入文件的变量表列，各变量之间用逗号分隔。
4．返回值：无。

例：
fscanf(stdin,"%s %d %d %ld",name,&nClass,&nAge,&number);
fprintf(fp,"%s %5d %4d %8ld",name,nClass,nAge,number);	


fscanf  从一个流中执行格式化输入
表头文件：#include<stdio.h>
函数原型：int fscanf(FILE *stream, char *format[,argument...]);
FILE* 一个FILE型的指针
char* 格式化输出函数，和scanf里的格式一样
返回值：成功时返回转换的字节数，失败时返回一个负数
fp = fopen("/local/test.c","a+");
fscanf(fp,"%s",str);

fdopen（将文件描述词转为文件指针）
相关函数 fopen，open，fclose
表头文件 #include<stdio.h>
定义函数 FILE * fdopen(int fildes,const char * mode);
函数说明 fdopen()会将参数fildes 的文件描述词，转换为对应的文件指针后返回。参数mode 字符串则代表着文件指针的流形态，此形态必须和原先文件描述词读写模式相同。关于mode 字符串格式请参考fopen()。
返回值 转换成功时返回指向该流的文件指针。失败则返回NULL，并把错误代码存在errno中。
#include<stdio.h>
main()
{
FILE * fp =fdopen(0,”w+”);
fprintf(fp,”%s/n”,”hello!”);
fclose(fp);
}
执行 hello!


注：
	文件描述符：	
f1 = open(“test1”,O_RDONLY,0) ； 
close(f1) ; 
f2 = open(“test2”,O_RDONLY,0) ； 
printf(“f2=%d\n”,f2);
f1,f2代表的是文件描述符，Unix进程从生命周期开始时，打开的描述符赋给stdin(描述符0),stdout(描述符1),stderr(描述符2)。open函数总是返回最低的未打开的描述符，所以第一次调用open会返回描述符3。调用close函数则会释放描述符3。如果再调用open函数则文件描述符又会是3。若为释放之前的文件描述符3，则再打开一个文件时，文件描述符就变为4。以此类推……
所以最后输出为： f2=3 。

fflush（更新缓冲区）
相关函数 write，fopen，fclose，setbuf
表头文件 #include<stdio.h>
定义函数 int fflush(FILE* stream);
函数说明 fflush()会强迫将缓冲区内的数据写回参数stream指定的文件中。如果参数stream为NULL，fflush()会将所有打开的文件数据更新。
返回值 成功返回0，失败返回EOF，错误代码存于errno中。
错误代码 EBADF 参数stream 指定的文件未被打开，或打开状态为只读。其它错误代码参考write（）。


fileno（返回文件流所使用的文件描述词）
相关函数 open，fopen
表头文件 #include<stdio.h>
定义函数 int fileno(FILE * stream);
函数说明 fileno()用来取得参数stream指定的文件流所使用的文件描述词。
返回值 返回文件描述词。

#include<stdio.h>
main()
{
	FILE * fp;
	int fd;
	fp=fopen(“/etc/passwd”,”r”);
	fd=fileno(fp);
	printf(“fd=%d/n”,fd);
	fclose(fp);
}
执行 fd=3


6. 以二进制形式读取文件中的数据
1． 函数原型：int fread(void *buffer,unsigned sife,unsigned count,FILE *fp)
2． 功能说明
　　从由fp指定的文件中，按二进制形式将sife*count个数据读到由buffer指出的数据区中。
3． 参数说明
	buffer：这是一个void型指针，指出要将读入数据存放在其中的存储区首地址。
	sife：指出一个数据块的字节数，即一个数据块的大小尺寸。
	count：指出一次读入多少个数据块（sife）。
	fp：这是个文件指针，指出要从其中读出数据的文件。
4．返回值
　　正常返回：实际读取数据块的个数，即count。
　　异常返回：如果文件中剩下的数据块个数少于参数中count指出的个数，或者发生了错误，返回0值。此时可以用feof()和ferror()来判定到底出现了什么情况。


7. 以二进制形式写数据到文件中去
1． 函数原型：int fwrite(void *buffer,unsigned sife,unsigned count,FILE *fp)
2． 功能说明
　　按二进制形式，将由buffer指定的数据缓冲区内的sife*count个数据写入由fp指定的文件中去。
3． 参数说明
	buffer：这是一个void型指针，指出要将其中数据输出到文件的缓冲区首地址。
	sife：指出一个数据块的字节数，即一个数据块的大小尺寸。
	count：一次输出多少个数据块（sife）。
	fp：这是个文件指针，指出要从其中读出数据的文件。
4．返回值
	正常返回：实际输出数据块的个数，即count。
　　异常返回：返回0值，表示输出结束或发生了错误。



8. 以二进制形式读取一个整数
1． 函数原型：int getw(FILE *fp)
2． 功能说明
　　从由fp指定的文件中，以二进制形式读取一个整数。
3． 参数说明
　　fp：是文件指针。
4． 返回值
　　正常返回：所读取整数的值。
　　异常返回：返回EOF，即-1。由于读取的整数值有可能是-1，所以必须用feof()或ferror()来判断是到了文件结束，还是出现了一个出错。



9. 以二进制形式存贮一个整数
1．函数原型：int putw(int n,FILE *fp)
2． 功能说明
　以二进制形式把由变量n指出的整数值存放到由fp指定的文件中。
3． 参数说明
　n：要存入文件的整数。
　fp：是文件指针。
4． 返回值
　正常返回：所输出的整数值。
　异常返回：返回EOF，即-1。由于输出的整数值有可能是-1，所以必须用feof()或ferror()来判断是到了文件结束，还是出现了一个出错。



文件状态检查
1. 文件结束
（1） 函数原型：int feof(FILE *fp)
（2） 功能说明
　　　该函数用来判断文件是否结束。
（3） 参数说明
　　　fp：文件指针。
（4） 返回值
　　　0：假值，表示文件未结束。
　　　1：真值，表示文件结束。

2. 文件读/写出错
（1） 函数原型：int ferror(FILE *fp)
（2） 功能说明
　　　检查由fp指定的文件在读写时是否出错。
（3） 参数说明
　　　fp：文件指针。
（4） 返回值
　　　0：假值，表示无错误。
　　　1：真值，表示出错。


3. 清除文件错误标志
（1） 函数原型：void clearerr(FILE *fp)
（2） 功能说明
　　　清除由fp指定文件的错误标志。
（3） 参数说明
　　　fp：文件指针。
（4） 返回值：无。


4. 了解文件指针的当前位置
（1） 函数原型：long ftell(FILE *fp)
（2） 功能说明
　　　取得由fp指定文件的当前读/写位置，该位置值用相对于文件开头的位移量来表示。
（3） 参数说明
　　　fp：文件指针。
（4） 返回值
　　　正常返回：位移量（这是个长整数）。
　　　异常返回：-1，表示出错。
（5） 实例



文件定位
1. 反绕
（1） 函数原型：void rewind(FILE *fp)
（2） 功能说明
　　　使由文件指针fp指定的文件的位置指针重新指向文件的开头位置。
（3） 参数说明
　　　fp：文件指针。
（4） 返回值：无。

2. 随机定位：移动文件流的读写位置
（1） 函数原型：int fseek(FILE *fp,long offset,int base)
（2） 功能说明
　　　使文件指针fp移到基于base的相对位置offset处。
（3）参数说明
　　　fp：文件指针。
　　　offset：相对base的字节位移量。这是个长整数，用以支持大于64KB的文件。
　　　base：文件位置指针移动的基准位置，是计算文件位置指针位移的基点。ANSI C定义了base的可能取值，以及这些取值的符号常量。
	 1）SEEK_SET 从距文件开头offset 位移量为新的读写位置
	 2) SEEK_CUR 以目前的读写位置往后增加offset个位移量.
     3）SEEK_END 将读写位置指向文件尾后再增加offset 个位移量. 当whence 值为SEEK_CUR 或SEEK_END 时, 参数offset 允许负值的出现.

（4）返回值
　　正常返回：当前指针位置。
　　异常返回：-1，表示定位操作出错。

下列是较特别的使用方式:
1) 欲将读写位置移动到文件开头时:fseek(FILE *stream,0,SEEK_SET);
2) 欲将读写位置移动到文件尾时:fseek(FILE *stream,0,0SEEK_END);
返回值 当调用成功时则返回0，若有错误则返回-1，errno会存放错误代码。
附加说明 fseek()不像lseek()会返回读写位置，因此必须使用ftell()来取得目前读写的位置。


ftell（取得文件流的读取位置）
相关函数 fseek，rewind，fgetpos，fsetpos
表头文件 #include<stdio.h>
定义函数 long ftell(FILE * stream);
函数说明 ftell()用来取得文件流目前的读写位置。参数stream为已打开的文件指针。
返回值 当调用成功时则返回目前的读写位置，若有错误则返回-1，errno会存放错误代码。
错误代码 EBADF 参数stream无效或可移动读写位置的文件流。
范例 参考fseek()。


关于exit()函数
1． 函数原型:void exit(int status)
2． 功能说明:exit()函数使程序立即终止执行，同时将缓冲区中剩余的数据输出并关闭所有已经打开的文件。
3． 参数说明:status：为0值表示程序正常终止，为非0值表示一个定义错误。
4． 返回值:无。



* 关于feof()函数
1． 函数原型:int feof(FILE *fp)
2． 功能说明
　 　在文本文件（ASCII文件）中可以用值为-1的符号常量EOF来作为文件的结束符。但是在二进制文件中-1往往可能是一个有意义的数据，因此不能用它 来作为文件的结束标志。为了能有效判别文件是否结束，ANSI C提供了标准函数feof()，用来识别文件是否结束。
3． 参数说明:fp：文件指针。
4． 返回值
　　返回为非0值：已到文件尾。
　　返回为0值：表示还未到文件尾。



C语言的直接I\O文件操作
函数             说明
open()         打开一个文件并返回它的句柄
close()        关闭一个句柄
lseek()        定位到文件的指定位置
read()         块读文件
write()        块写文件
eof()          测试文件是否结束
filelength()   取得文件长度
rename()       重命名文件
chsize()       改变文件长度