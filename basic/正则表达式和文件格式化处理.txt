正则表达式

特殊符号代表的意义

grep [-A] [-B] [--color=auto] '搜寻字符串' filename

任意一个字符 . 与重复字符 *  与任意字符 .*

限定连续RE字符范围{}
{n}  {n1,n2}  {n1,}

基础正则表达式字符汇整
^word   word$  .  *  [list]  [n1-n2]  [^list] \{n,m\}

sed [-nefr] function
function:
a  c  d  i	p  s  g


延伸正则表达式：egrep 或者 grep -E
+  ?	|	()  ()+

格式化打印：printf
printf '打印格式' 实际内容
\a	\b	\f	\n	\r	\t	\v	\xNN
%ns	%ni	%N.nf	

awk 好用的数据处理工具
awk '条件类型1{动作1}条件类型2{动作2}...' filename
awk内建变量 NF  NR  FS

档案比对工具
diff [-bBi] from-file to-file  (以行为单位)
cmp [-s] file1 file2   (以字节为单位)

patch:将差异制作成补丁文档
patch -pN < patch_file
patch -R -pN < patch_file 

档案打印准备
pr /etc/man.config

特殊符号代表的意义
[:alnum:] 代表英文大小写字符及数字，即0-9，A-Z,a-z
[:alpha:] 代表英文大小写字符，即A-Z,a-z
[:blank:] 代表空格键与[Tab]按键两者
[:cntrl:] 代表键盘上的控制按键，即CR,LF,Tab,Del...等
[:digit:] 代表数字，即0-9
[:graph:] 除了空格符(空格键与[Tab]键)外的其它所有按键
[:lower:] 代表小写字符，即a-z
[:print:] 代表任何可以被打印出来的字符
[:punct:] 代表标点符号，即:"'?,.等
[:upper:] 代表大写字符，即A-Z
[:space:] 任何会产生空白的字符，包括空格键，[Tab]，CR等
[:xdigit:] 代表16进制的数字类型，包括：0-9，A-F,a-f的数字与字符


grep的一些进阶选项
grep [-A] [-B] [--color=auto] '搜寻字符串' filename
选项与参数：
-A: 后面可加数字，为after的意思，除了列出该行外，后续的n行也列出来
-B: 后面可加数字，为before的意思，除了列出该行外，前面的n行也列出来
--color=auto: 可将正确的那个撷取数据列出颜色
范例：
dmesg | grep -n -A3 -B2 --color=auto 'eth'
grep -n '^[^[:alpha:]]' regular_express.txt
//"^"在[]外表示定位在行首，"^"在[]内表示反向选择
//^表示行首；$表示行尾
grep -n '\.$' regular_express.txt  //搜寻以小数点.结尾行
grep -n '^$' regular_express.txt  //搜寻空白行

任意一个字符. 与重复字符*
.(小数点): 代表"一定有一个任意字符"的意思；
*(星号): 代表[重复前一个0(空字符)到无穷多次]的意思，为组合形态
范例：
grep -n 'g..d' regular_express.txt
grep -n 'o*' regular_express.txt //把所有数据打印出来
grep -n 'oo*' regular_express.txt  //打印至少包含一个'o'的行
grep -n 'ooo*' regular_express.txt  //打印至少包含一个'oo'的行
grep -n 'g.*g' regular_express.txt  // .* 表示任意字符；g...g

限定连续RE字符范围{}
{n}：连续出现n个指定字符
{n1,n2}:连续出现n1到n2个指定字符
{n1,}:连续n1及以上个指定字符
范例：
grep -n 'go\{2,5\}g' regular_express.txt  //g后接2到5个o,然后再接一个g的字符串
grep -n 'go\{2\}g' regular_express.txt  //goog
  
基础正则表达式字符汇整
RE字符   意义与范例
^word    待搜寻的word在行首
word$    待搜寻的word在行尾
.        代表"一定有一个任意字符"的字符
\        跳脱字符，将特殊符号的特殊意义去除
*        重复零个到无穷多个前一个RE字符
[list]   字符集合的RE字符，里面列出想要撷取的字符，在[]当中仅代表一个待搜寻的字符
[n1-n2]   字符集合的RE字符，里面列出想要撷取的字符范围
[^list]   里面列出不要的字符串或范围
\{n,m\}   连续n到m个的前一个RE字符


sed [-nefr] [动作]
选项与参数：
-n: 使用安静(silent)模式，在一般sed的用法中，所有来自stdin的数据一般都会被列出到屏幕上。但如果加上 -n 参数后，则只有经过 sed 特殊处理的那一行(或者动作)才被列出来。
-e: 直接在指令列模式上进行 sed 的动作编辑
-f: 直接将 sed 的动作写在一个文档内， -f filename 则可以执行 filename 内的 sed 动作；
-r: sed 的动作支持的延伸型正则表达式语法。(预设是基础正则表达式语法)
-i: 直接修改读取的文档内容，而不是由屏幕输出
动作说明: n1,n2[function]
n1,n2: 不见得会存在，一般代表"选择进行动作的行数"，举例来说，如果动作是需要在10到20行之间进行的，则 10,20[动作行为]
function：
a: 新增，a的后面可以接字符串，而这些字符串会在新的一行出现(目前的下一行)
c: 取代，c的后面可以接字符串，这些字符串可以取代n1,n2 之间的值
d: 删除，d 后面通常不接任何内容
i: 插入，i的后面可以接字符串，而这些字符串会在新的一行出现(目前的上一行)
p: 打印，即将某个选择的数据打印出来。通常 p 会与参数 sed -n 配合使用
s: 取代，可以直接进行取代工作。可以搭配正则表达式使用，例如 1,20s/old/new/g 
   (g：表示命令作用于整个当前行)

范例：
//将/etc/passwd 的内容列出并且打印行号，同时，将第2~5行删除
nl /etc/passwd | sed '2,5d'
//在第二行后即在第三行加上"drink tea"字样
nl /etc/passwd | sed '2a drink tea'
nl /etc/passwd | sed '2a drink tea or ......\drink beer?' //'\'代表换行符
//整行取代。将第2-5行的内容取代成为"No 2-5 number"
nl /etc/passwd | sed '2,5c No 2-5number'
//仅列出文档内的第5-7行
nl /etc/passwd | sed -n '5,7p'
//仅保留IP地址
/sbin/ifconfig eth0 | grep 'inet addr' | sed 's/^.*addr://g' | sed 's/Bcast.*$//g'
//删除注释和空白行
cat /etc/man.config | grep 'MAN' | sed 's/#.*$//g' | sed '/^$/d'

直接修改文档内容
范例：利用sed 将文档内每一行结尾若为.则换成!;-i:直接修改文档内容而不输出
sed -i 's/\.$/\!/g' regular_express.txt 
范例：在文档的最后一行新增 "This is a test"
sed -i '$a #This is a test' regular_express.txt


延伸正则表达式: egrep 或者 grep -E
RE字符   意义
+        重复"一个或一个以上"的前一个RE字符
?        "零个或一个"的前一个RE字符
|        用 或(or) 的方式找出数个字符串
()       找出"群组"字符串  范例：egrep -n 'g(la|oo)d' regular_express.txt  //搜寻(glad)或(good)这两个字符串
()+      多个重复群组的判别  范例：echo 'AxyzxyzxyzxyzxyzC' | egrep 'A(xyz)+C'  //找开头是A结尾是C，中间有一个以上的"xyz"字符串


文件的格式化与相关处理
格式化打印: printf
printf '打印格式' 实际内容
选项与参数：
关于格式方面的几个特殊样式：
	\a	警告声音输出
	\b	退格键(backspace)
	\f	清除屏幕(form feed)
	\n	输出新的一行
	\r	即 Enter 按键
	\t	水平的[tab]按键
	\v	垂直的[tab]按键
	\xNN	NN为两位数的数字，可以转换数字成字符
关于C程序语言内，常见的变数格式
	%ns	n是数字，s是string,即多少个字符
	%ni n是数字，i是integer,即多少个整数字数
	%N.nf N与n都是数字，f代表floating,N:位数总长，n保留几位小数 如%10.2f
	
范例：
printf '%10s %5i %5i %s\t %8.2f\n' $(cat printf.txt | grep -v Name)


awk: 好用的数据处理工具
awk比较倾向于一行当中分成数个"字段"来处理,默认的字段分隔符为"空格键"或[tab]键。因此，awk适合处理小型的数据处理。
awk '条件类型1{动作1}条件类型2{动作2}...' filename

范例：
last -n 5 | awk '{print $1 "\t" $3}'  //$0代表一整行

awk内建变量
变量名称	代表意义
NF			每一行($0)拥有的字段总数
NR			目前awk所处理的是"第几行"数据
FS			目前的分隔字符，默认是空格键

范例：
last -n 5 | awk '{print $1 "\tlines:" NR "\tcolumns:" NF}'
//以":"作为字段的分隔，当第三栏小于10时，列出账号与第三栏
cat /etc/passwd | awk 'BEGIN {FS=":"} $3 < 10 {print $1 "\t" $3}'
(BEGIN: 从第一行开始，否则第一行会以默认空格键分隔，":"分隔符从第二行生效)
范例：
 cat pay.txt | \
> awk 'NR==1{printf
"%10s %10s %10s %10s %10s\n",$1,$2,$3,$4,"Total" }
NR>=2{total = $2 + $3 + $4
printf "%10s %10d %10d %10d %10.2f\n", $1, $2, $3, $4, total}'



档案比对工具
diff [-bBi] from-file to-file
选项与参数：
frome-file: 一个档名，作为原始比对文档的档名
to-file: 一个档名，作为目的比对文档的档名
注意：frome-file 或 to-file 可以 - 取代， - 代表"standard input"之意
-b: 忽略一行当中，仅有多个空白的差异
-B: 忽略空白行的差异
-i: 忽略大小写的不同

cmp:diff主要以"行"为单位比对，cmp则是以"字节"为单位比对
cmp [-s] file1 file2
-s: 将所有的不同点的字节都列出来。因为cmp预设仅会输出第一个发现的不同点


patch: 将差异制作成补丁文档
diff passwd.old passwd.new > passwd.patch

patch -pN < patch_file  //更新
patch -R -pN < patch_file  //还原
选项与参数：
-p: 后面可以接"取消几层目录"的意思
-R: 代表还原，将新的文件还原成原来旧的版本
范例：
patch -p0 < passwd.patch
patch -R p0 < passwd.patch



档案打印准备: pr
在linux底下打印纯文本文档时，可以用 pr 加入标题、页码等。
范例：
pr /etc/man.config

















