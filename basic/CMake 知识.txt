CMake 知识 

参考链接：
https://www.cnblogs.com/cv-pr/p/6206921.html

1. CMake编译原理
CMake是一种跨平台编译工具，比make更为高级，使用起来要方便得多。CMake主要是编写CMakeLists.txt文件，然后用cmake命令将CMakeLists.txt文件转化为make所需要的makefile文件，最后用make命令编译源码生成可执行程序或共享库（so(shared object)）。因此CMake的编译基本就两个步骤：
	1) cmake
	2) make


2. 使用CMake编译程序
a.准备程序文件
文件目录结构如下：
		.
	├── build
	├── CMakeLists.txt
	├── include
	│   └── b.h
	└── src
	    ├── b.c
	    └── main.c

b.编写CMakeLists.txt
该文件通常放在和src，include的同级目录，也可放在其他地方，只要里面编写的路径能够正确指向就好了。CMakeLists.txt文件，如下所示：
	#1.cmake verson，指定cmake版本 
	cmake_minimum_required(VERSION 3.2)

	#2.project name，指定项目的名称，一般和项目的文件夹名称对应
	PROJECT(test_sqrt)

	#3.head file path，头文件目录
	INCLUDE_DIRECTORIES(include)

	#4.source directory，源文件目录
	AUX_SOURCE_DIRECTORY(src DIR_SRCS)

	#5.set environment variable，设置环境变量，编译用到的源文件全部都要放到这里，否则编译能够通过，但是执行的时候会出现各种问题，比如"symbol lookup error xxxxx , undefined symbol"
	SET(TEST_MATH
	${DIR_SRCS}
	)

	#6.add executable file，添加要编译的可执行文件
	ADD_EXECUTABLE(${PROJECT_NAME} ${TEST_MATH})

	#7.add link library，添加可执行文件所需要的库，比如我们用到了libm.so（命名规则：lib+name+.so），就添加该库的名称
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} m)


c.编译和运行程序
准备好了以上的所有材料，接下来，就可以编译了，由于编译中出现许多中间的文件，因此最好新建一个独立的目录build，在该目录下进行编译，编译步骤如下所示：
mkdir build
cd build
cmake ..   #指向CMakelists.txt 所在目录
make
